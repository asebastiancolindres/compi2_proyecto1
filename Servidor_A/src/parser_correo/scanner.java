/* The following code was generated by JFlex 1.4.3 on 27/03/14 09:00 PM */

package parser_correo;
import java_cup.runtime.Symbol;

import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/03/14 09:00 PM from the specification file
 * <tt>scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\56\1\0\2\56\22\0\1\54\1\0\1\25\3\22"+
    "\4\0\2\22\1\27\1\20\1\2\1\35\12\1\1\21\1\22\1\23"+
    "\1\26\1\24\1\22\1\5\1\15\1\51\1\41\1\36\1\31\1\52"+
    "\1\43\1\53\1\32\2\3\1\46\1\50\1\34\1\33\1\40\1\3"+
    "\1\42\1\30\1\37\1\44\1\47\4\3\4\0\1\4\1\0\1\45"+
    "\1\51\1\16\1\13\1\7\1\52\1\43\1\53\1\12\2\3\1\46"+
    "\1\17\1\34\1\14\1\40\1\3\1\10\1\6\1\37\1\44\1\11"+
    "\4\3\65\0\1\22\16\0\1\22\21\0\1\55\37\0\1\55\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\7\4\1\5\1\6\1\7"+
    "\1\10\1\11\5\4\1\12\2\2\2\0\1\4\1\0"+
    "\3\4\1\13\1\4\1\14\1\4\11\0\3\4\1\15"+
    "\4\4\1\2\3\0\6\4\25\0\7\4\5\0\7\4"+
    "\4\0\1\16\26\0\1\17\5\4\1\20\1\0\1\21"+
    "\1\0\1\4\1\22\3\4\1\23\1\4\20\0\1\24"+
    "\13\0\3\4\1\25\1\26\1\27\1\21\1\0\1\30"+
    "\1\4\1\31\1\32\1\4\6\0\1\33\24\0\1\34"+
    "\2\4\3\0\1\4\1\35\1\36\1\37\7\0\1\40"+
    "\20\0\1\41\1\4\1\42\1\0\1\27\1\0\1\43"+
    "\3\0\1\44\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\5\0\1\51\2\0\1\52\2\0\1\53\1\0\1\54"+
    "\2\0\1\55\4\0\1\56\3\0\1\57\2\0\1\60"+
    "\1\0\1\61\2\0\1\62\2\0\1\63\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\67\2\0\1\70\1\71"+
    "\3\0\1\72\1\73\1\0\1\74\1\0\1\75\4\0"+
    "\1\76\4\0\1\77\2\0\1\100\1\0\1\101\1\102"+
    "\1\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\57\0\57\0\57\0\57"+
    "\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e"+
    "\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\215"+
    "\0\u04c6\0\215\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\215"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\57\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba"+
    "\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\215\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\215"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\215\0\u17af\0\u17de\0\u180d"+
    "\0\215\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956"+
    "\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace"+
    "\0\u1afd\0\u1b2c\0\57\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\215\0\u1e1c\0\57\0\u1e4b\0\215\0\u1e7a"+
    "\0\215\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\57\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c"+
    "\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\215\0\u23cd"+
    "\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\215\0\215\0\57"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\57"+
    "\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779"+
    "\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1"+
    "\0\57\0\u2920\0\215\0\u294f\0\57\0\u297e\0\215\0\u29ad"+
    "\0\u29dc\0\u2a0b\0\57\0\u2a3a\0\57\0\u2a69\0\57\0\u2a98"+
    "\0\57\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\57\0\u2bb2"+
    "\0\u2be1\0\57\0\u2c10\0\u2c3f\0\57\0\u2c6e\0\215\0\u2c9d"+
    "\0\u2ccc\0\57\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\57\0\u2db7"+
    "\0\u2de6\0\u2e15\0\57\0\u2e44\0\u2e73\0\57\0\u2ea2\0\57"+
    "\0\u2ed1\0\u2f00\0\57\0\u2f2f\0\u2f5e\0\57\0\u2f8d\0\57"+
    "\0\u2fbc\0\57\0\u2feb\0\u301a\0\u3049\0\57\0\57\0\u3078"+
    "\0\u30a7\0\57\0\57\0\u30d6\0\u3105\0\u3134\0\57\0\57"+
    "\0\u3163\0\57\0\u3192\0\57\0\u31c1\0\u31f0\0\u321f\0\u324e"+
    "\0\57\0\u327d\0\u32ac\0\u32db\0\u330a\0\57\0\u3339\0\u3368"+
    "\0\57\0\u3397\0\57\0\57\0\u33c6\0\57\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\7\1\10"+
    "\1\5\1\11\1\12\2\5\1\13\1\5\3\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\6\1\7\1\11\2\5"+
    "\1\4\1\12\1\21\1\22\1\13\1\10\1\5\1\23"+
    "\1\5\1\24\3\5\1\25\1\5\1\26\1\5\1\26"+
    "\60\0\1\27\1\30\15\0\1\31\1\32\36\0\1\33"+
    "\1\0\2\5\1\34\12\5\10\0\5\5\1\0\16\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\1\5"+
    "\1\35\10\5\10\0\1\5\1\35\3\5\1\0\16\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\12\5"+
    "\10\0\4\5\1\36\1\0\16\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\1\5\1\37\10\5\10\0"+
    "\1\5\1\37\3\5\1\0\16\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\5\5\1\40\4\5\10\0"+
    "\4\5\1\41\1\0\1\40\15\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\1\5\1\42\10\5\10\0"+
    "\1\5\1\42\3\5\1\0\16\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\6\5\1\43\3\5\10\0"+
    "\3\5\1\43\1\5\1\0\16\5\1\0\1\5\10\0"+
    "\1\44\1\45\2\0\1\46\1\0\1\47\1\50\12\0"+
    "\1\44\2\0\1\51\1\52\1\46\2\0\1\50\1\45"+
    "\1\0\1\53\1\47\4\0\1\54\5\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\55\2\5\1\56\2\5\10\0"+
    "\2\5\1\55\2\5\1\0\7\5\1\56\6\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\1\5\1\57"+
    "\10\5\10\0\1\5\1\57\3\5\1\0\5\5\1\60"+
    "\10\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\1\61\11\5\10\0\1\61\4\5\1\0\16\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\4\5\1\62"+
    "\5\5\10\0\2\5\1\62\2\5\1\0\16\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\1\5\1\63"+
    "\2\5\1\64\5\5\10\0\1\5\1\63\1\64\2\5"+
    "\1\0\16\5\1\0\1\5\55\0\1\26\1\0\1\26"+
    "\1\0\1\65\1\30\15\0\1\31\1\32\36\0\1\30"+
    "\56\0\1\66\56\0\1\67\56\0\1\33\3\5\1\34"+
    "\12\5\10\0\5\5\1\0\16\5\1\0\1\5\7\0"+
    "\1\70\51\0\1\33\1\0\2\5\1\34\1\71\11\5"+
    "\10\0\1\71\4\5\1\0\16\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\3\5\1\72\6\5\10\0"+
    "\5\5\1\0\11\5\1\72\4\5\1\0\1\5\2\0"+
    "\1\33\1\0\2\5\1\34\12\5\10\0\5\5\1\0"+
    "\5\5\1\73\10\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\74\5\5\10\0\2\5\1\74"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\2\5\1\75\7\5\10\0\5\5\1\0"+
    "\4\5\1\75\3\5\1\76\5\5\1\0\1\5\11\0"+
    "\1\77\23\0\1\100\5\0\1\77\23\0\1\101\21\0"+
    "\1\101\34\0\1\102\21\0\1\102\33\0\1\103\1\0"+
    "\1\104\17\0\1\103\11\0\1\104\23\0\1\105\4\0"+
    "\1\106\14\0\1\105\1\0\1\106\12\0\1\107\24\0"+
    "\1\110\16\0\1\110\31\0\1\111\1\112\1\113\2\0"+
    "\1\114\1\0\1\115\1\116\11\0\1\111\1\112\2\0"+
    "\1\117\1\0\1\114\2\0\1\116\1\113\1\0\1\120"+
    "\1\115\4\0\1\121\12\0\1\122\21\0\1\122\35\0"+
    "\1\123\21\0\1\123\26\0\1\33\1\0\2\5\1\34"+
    "\12\5\10\0\5\5\1\0\2\5\1\124\13\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\11\5\1\125"+
    "\10\0\5\5\1\0\12\5\1\125\3\5\1\0\1\5"+
    "\2\0\1\33\1\0\2\5\1\34\12\5\10\0\5\5"+
    "\1\0\1\5\1\126\14\5\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\12\5\10\0\5\5\1\0\6\5"+
    "\1\127\7\5\1\0\1\5\2\0\1\33\1\0\2\5"+
    "\1\34\1\130\11\5\10\0\1\130\4\5\1\0\16\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\10\5"+
    "\1\131\1\5\10\0\5\5\1\0\3\5\1\131\12\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\12\5"+
    "\10\0\5\5\1\0\10\5\1\132\5\5\1\0\1\5"+
    "\2\0\1\65\1\30\55\0\1\133\16\0\1\134\37\0"+
    "\1\135\17\0\1\136\44\0\1\137\50\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\140\5\5\10\0\2\5\1\140"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\141\5\5\10\0\2\5\1\141"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\142\5\5\10\0\2\5\1\142"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\10\5\1\143\1\5\10\0\5\5\1\0"+
    "\3\5\1\143\12\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\2\5\1\144\7\5\10\0\5\5\1\0"+
    "\4\5\1\144\11\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\6\5\1\145\3\5\10\0\3\5\1\145"+
    "\1\5\1\0\6\5\1\146\7\5\1\0\1\5\11\0"+
    "\1\147\31\0\1\147\25\0\1\150\35\0\1\150\52\0"+
    "\1\151\21\0\1\152\15\0\1\153\3\0\1\152\72\0"+
    "\1\154\30\0\1\155\22\0\1\155\63\0\1\156\20\0"+
    "\1\157\23\0\1\160\5\0\1\157\31\0\1\161\27\0"+
    "\1\161\30\0\1\162\30\0\1\162\15\0\1\163\21\0"+
    "\1\163\35\0\1\164\23\0\1\165\5\0\1\164\23\0"+
    "\1\166\21\0\1\166\34\0\1\167\21\0\1\167\33\0"+
    "\1\170\1\0\1\171\17\0\1\170\11\0\1\171\23\0"+
    "\1\172\4\0\1\173\14\0\1\172\1\0\1\173\12\0"+
    "\1\174\24\0\1\175\16\0\1\175\31\0\1\176\21\0"+
    "\1\176\35\0\1\177\21\0\1\177\71\0\1\200\30\0"+
    "\1\201\22\0\1\201\16\0\1\33\1\0\2\5\1\34"+
    "\6\5\1\202\3\5\10\0\3\5\1\202\1\5\1\0"+
    "\16\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\7\5\1\203\2\5\10\0\5\5\1\0\7\5\1\203"+
    "\6\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\4\5\1\204\5\5\10\0\2\5\1\204\2\5\1\0"+
    "\16\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\7\5\1\205\2\5\10\0\5\5\1\0\7\5\1\205"+
    "\6\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\12\5\10\0\5\5\1\0\1\5\1\206\14\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\12\5\10\0"+
    "\5\5\1\0\15\5\1\207\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\7\5\1\210\2\5\10\0\5\5"+
    "\1\0\7\5\1\210\6\5\1\0\1\5\21\0\1\134"+
    "\37\0\1\211\76\0\1\136\36\0\1\212\65\0\1\213"+
    "\47\0\1\33\1\0\2\5\1\34\6\5\1\214\3\5"+
    "\10\0\3\5\1\214\1\5\1\0\16\5\1\0\1\5"+
    "\2\0\1\33\1\0\2\5\1\34\6\5\1\215\3\5"+
    "\10\0\3\5\1\215\1\5\1\0\16\5\1\0\1\5"+
    "\2\0\1\33\1\0\2\5\1\34\1\216\11\5\10\0"+
    "\1\216\4\5\1\0\16\5\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\4\5\1\217\5\5\10\0\2\5"+
    "\1\217\2\5\1\0\16\5\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\1\5\1\220\10\5\10\0\1\5"+
    "\1\220\3\5\1\0\16\5\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\2\5\1\221\7\5\10\0\5\5"+
    "\1\0\4\5\1\221\11\5\1\0\1\5\2\0\1\33"+
    "\1\0\2\5\1\34\11\5\1\222\10\0\5\5\1\0"+
    "\12\5\1\222\3\5\1\0\1\5\15\0\1\223\16\0"+
    "\1\223\35\0\1\224\17\0\1\224\36\0\1\225\17\0"+
    "\1\225\63\0\1\226\53\0\1\227\75\0\1\230\16\0"+
    "\1\231\22\0\1\231\30\0\1\232\31\0\1\232\53\0"+
    "\1\233\30\0\1\234\35\0\1\234\60\0\1\235\13\0"+
    "\1\236\21\0\1\236\36\0\1\237\31\0\1\237\25\0"+
    "\1\240\35\0\1\240\52\0\1\241\21\0\1\242\15\0"+
    "\1\243\3\0\1\242\72\0\1\244\30\0\1\245\22\0"+
    "\1\245\63\0\1\246\20\0\1\247\23\0\1\250\5\0"+
    "\1\247\31\0\1\251\27\0\1\251\30\0\1\252\30\0"+
    "\1\252\52\0\1\253\30\0\1\254\22\0\1\254\32\0"+
    "\1\255\27\0\1\255\64\0\1\256\4\0\1\33\1\0"+
    "\2\5\1\34\12\5\10\0\5\5\1\0\16\5\1\0"+
    "\1\257\2\0\1\33\1\0\2\5\1\34\10\5\1\260"+
    "\1\5\10\0\5\5\1\0\3\5\1\260\12\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\2\5\1\261"+
    "\7\5\10\0\5\5\1\0\4\5\1\261\11\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\7\5\1\262"+
    "\2\5\10\0\5\5\1\0\7\5\1\262\6\5\1\0"+
    "\1\5\2\0\1\33\1\0\2\5\1\34\7\5\1\263"+
    "\2\5\10\0\5\5\1\0\7\5\1\263\6\5\1\0"+
    "\1\5\2\0\1\264\56\0\1\265\66\0\1\266\46\0"+
    "\1\33\1\0\2\5\1\34\12\5\10\0\4\5\1\267"+
    "\1\0\16\5\1\0\1\5\2\0\1\33\1\0\2\5"+
    "\1\34\12\5\10\0\5\5\1\0\1\5\1\270\14\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\6\5"+
    "\1\271\3\5\10\0\3\5\1\271\1\5\1\0\16\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\6\5"+
    "\1\272\3\5\10\0\3\5\1\272\1\5\1\0\16\5"+
    "\1\0\1\5\2\0\1\33\1\0\2\5\1\34\12\5"+
    "\10\0\4\5\1\273\1\0\16\5\1\0\1\5\11\0"+
    "\1\274\31\0\1\274\31\0\1\275\27\0\1\275\17\0"+
    "\1\276\21\0\1\276\40\0\1\277\17\0\1\277\63\0"+
    "\1\300\31\0\1\301\17\0\1\301\41\0\1\302\27\0"+
    "\1\302\20\0\1\303\21\0\1\303\34\0\1\304\21\0"+
    "\1\304\34\0\1\305\21\0\1\305\35\0\1\306\31\0"+
    "\1\306\26\0\1\307\17\0\1\307\40\0\1\310\16\0"+
    "\1\310\35\0\1\311\17\0\1\311\36\0\1\312\17\0"+
    "\1\312\63\0\1\313\53\0\1\314\75\0\1\315\16\0"+
    "\1\316\22\0\1\316\30\0\1\317\31\0\1\317\53\0"+
    "\1\320\30\0\1\321\35\0\1\321\60\0\1\322\22\0"+
    "\1\323\27\0\1\323\64\0\1\324\13\0\1\325\31\0"+
    "\1\325\31\0\1\326\27\0\1\326\12\0\1\33\1\0"+
    "\2\5\1\34\6\5\1\327\3\5\10\0\3\5\1\327"+
    "\1\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\330\5\5\10\0\2\5\1\330"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\4\5\1\331\5\5\10\0\2\5\1\331"+
    "\2\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\12\5\10\0\5\5\1\0\16\5\1\332"+
    "\1\5\2\0\1\333\67\0\1\334\45\0\1\33\1\0"+
    "\2\5\1\34\2\5\1\335\7\5\10\0\5\5\1\0"+
    "\4\5\1\335\11\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\1\336\11\5\10\0\1\336\4\5\1\0"+
    "\16\5\1\0\1\5\2\0\1\33\1\0\2\5\1\34"+
    "\7\5\1\337\2\5\10\0\5\5\1\0\7\5\1\337"+
    "\6\5\1\0\1\5\25\0\1\340\45\0\1\341\22\0"+
    "\1\341\57\0\1\342\53\0\1\343\36\0\1\344\16\0"+
    "\1\344\34\0\1\345\35\0\1\345\23\0\1\346\16\0"+
    "\1\346\57\0\1\347\46\0\1\350\41\0\1\351\21\0"+
    "\1\351\41\0\1\352\16\0\1\352\33\0\1\353\31\0"+
    "\1\353\31\0\1\354\27\0\1\354\17\0\1\355\21\0"+
    "\1\355\40\0\1\356\17\0\1\356\63\0\1\357\31\0"+
    "\1\360\17\0\1\360\41\0\1\361\27\0\1\361\20\0"+
    "\1\362\21\0\1\362\34\0\1\363\21\0\1\363\34\0"+
    "\1\364\21\0\1\364\35\0\1\365\31\0\1\365\24\0"+
    "\1\366\31\0\1\366\31\0\1\367\27\0\1\367\23\0"+
    "\1\370\17\0\1\370\50\0\1\371\33\0\1\33\1\0"+
    "\2\5\1\34\6\5\1\372\3\5\10\0\3\5\1\372"+
    "\1\5\1\0\16\5\1\0\1\5\2\0\1\33\1\0"+
    "\2\5\1\34\6\5\1\373\3\5\10\0\3\5\1\373"+
    "\1\5\1\0\16\5\1\0\1\5\17\0\1\374\22\0"+
    "\1\374\16\0\1\375\70\0\1\376\44\0\1\33\1\0"+
    "\2\5\1\34\6\5\1\377\3\5\10\0\3\5\1\377"+
    "\1\5\1\0\16\5\1\0\1\5\15\0\1\u0100\16\0"+
    "\1\u0100\33\0\1\u0101\31\0\1\u0101\31\0\1\u0102\27\0"+
    "\1\u0102\35\0\1\u0103\46\0\1\u0104\16\0\1\u0104\47\0"+
    "\1\u0105\44\0\1\u0106\17\0\1\u0106\50\0\1\u0107\66\0"+
    "\1\u0108\46\0\1\u0109\45\0\1\u010a\22\0\1\u010a\57\0"+
    "\1\u010b\53\0\1\u010c\36\0\1\u010d\16\0\1\u010d\34\0"+
    "\1\u010e\35\0\1\u010e\33\0\1\u010f\46\0\1\u0110\16\0"+
    "\1\u0110\57\0\1\u0111\46\0\1\u0112\41\0\1\u0113\21\0"+
    "\1\u0113\37\0\1\u0114\17\0\1\u0114\50\0\1\u0115\46\0"+
    "\1\u0116\16\0\1\u0116\24\0\1\33\1\0\2\5\1\34"+
    "\12\5\10\0\4\5\1\u0117\1\0\16\5\1\0\1\5"+
    "\15\0\1\u0118\16\0\1\u0118\37\0\1\u0119\66\0\1\u011a"+
    "\46\0\1\u011b\16\0\1\u011b\62\0\1\u011c\25\0\1\u011d"+
    "\21\0\1\u011d\41\0\1\u011e\22\0\1\u011e\44\0\1\u011f"+
    "\46\0\1\u0120\16\0\1\u0120\33\0\1\u0121\31\0\1\u0121"+
    "\31\0\1\u0122\27\0\1\u0122\35\0\1\u0123\46\0\1\u0124"+
    "\16\0\1\u0124\31\0\1\u0125\15\0\1\u0126\3\0\1\u0125"+
    "\40\0\1\u0127\17\0\1\u0127\50\0\1\u0128\46\0\1\u0129"+
    "\16\0\1\u0129\31\0\1\u012a\15\0\1\u012b\3\0\1\u012a"+
    "\36\0\1\u012c\31\0\1\u012c\24\0\1\u012d\72\0\1\u012e"+
    "\47\0\1\u012f\27\0\1\u012f\35\0\1\u0130\46\0\1\u0131"+
    "\16\0\1\u0131\47\0\1\u0132\46\0\1\u0133\16\0\1\u0133"+
    "\62\0\1\u0134\25\0\1\u0135\15\0\1\u0136\3\0\1\u0135"+
    "\52\0\1\u0137\45\0\1\u0138\22\0\1\u0138\26\0\1\u0139"+
    "\15\0\1\u013a\3\0\1\u0139\52\0\1\u013b\42\0\1\u013c"+
    "\31\0\1\u013c\31\0\1\u013d\51\0\1\u013e\31\0\1\u013e"+
    "\40\0\1\u013f\56\0\1\u0140\47\0\1\u0141\27\0\1\u0141"+
    "\35\0\1\u0142\46\0\1\u0143\16\0\1\u0143\47\0\1\u0144"+
    "\41\0\1\u0145\21\0\1\u0145\27\0\1\u0146\66\0\1\u0147"+
    "\17\0\1\u0147\34\0\1\u0148\31\0\1\u0148\40\0\1\u0149"+
    "\46\0\1\u014a\16\0\1\u014a\41\0\1\u014b\54\0\1\u014c"+
    "\16\0\1\u014c\35\0\1\u014d\17\0\1\u014d\32\0\1\u014e"+
    "\21\0\1\u014e\42\0\1\u014f\50\0\1\u0150\15\0\1\u0151"+
    "\3\0\1\u0150\42\0\1\u0152\16\0\1\u0152\42\0\1\u0153"+
    "\63\0\1\u0154\40\0\1\u0155\15\0\1\u0156\3\0\1\u0155"+
    "\52\0\1\u0157\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\4\11\10\1\2\0"+
    "\1\1\1\0\7\1\11\0\11\1\3\0\6\1\25\0"+
    "\7\1\5\0\7\1\4\0\1\11\26\0\7\1\1\0"+
    "\1\1\1\0\7\1\20\0\1\11\13\0\6\1\1\11"+
    "\1\0\5\1\6\0\1\11\24\0\3\1\3\0\3\1"+
    "\1\11\7\0\1\11\20\0\1\11\2\1\1\0\1\11"+
    "\1\0\1\1\3\0\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\1\2\0\1\11\4\0\1\11\3\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\2\11\2\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\1\11\4\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* Lista con errores sintacticos */
public LinkedList<Errores> lista=new LinkedList<Errores>();
/* Metodo que es llamado al encontrar un error lexico */
private void ErrorScan(int linea, int columna, String valor){
lista.add(new Errores(linea, columna, "Error lexico en el caracter "+valor) );}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return new Symbol(simbolo.lista, yychar,yyline,new String(yytext()));
          }
        case 69: break;
        case 42: 
          { return new Symbol(simbolo.clave2, yychar,yyline,new String(yytext()));
          }
        case 70: break;
        case 36: 
          { return new Symbol(simbolo.asunto1, yychar,yyline,new String(yytext()));
          }
        case 71: break;
        case 43: 
          { return new Symbol(simbolo.fecha2, yychar,yyline,new String(yytext()));
          }
        case 72: break;
        case 68: 
          { return new Symbol(simbolo.destinatarios2, yychar,yyline,new String(yytext()));
          }
        case 73: break;
        case 62: 
          { return new Symbol(simbolo.contenido2, yychar,yyline,new String(yytext()));
          }
        case 74: break;
        case 67: 
          { return new Symbol(simbolo.destinatario2, yychar,yyline,new String(yytext()));
          }
        case 75: break;
        case 55: 
          { return new Symbol(simbolo.correos2, yychar,yyline,new String(yytext()));
          }
        case 76: break;
        case 38: 
          { return new Symbol(simbolo.correo1, yychar,yyline,new String(yytext()));
          }
        case 77: break;
        case 25: 
          { return new Symbol(simbolo.inicio, yychar,yyline,new String(yytext()));
          }
        case 78: break;
        case 51: 
          { return new Symbol(simbolo.registro1, yychar,yyline,new String(yytext()));
          }
        case 79: break;
        case 54: 
          { return new Symbol(simbolo.archivo2, yychar,yyline,new String(yytext()));
          }
        case 80: break;
        case 49: 
          { return new Symbol(simbolo.nombre2, yychar,yyline,new String(yytext()));
          }
        case 81: break;
        case 46: 
          { return new Symbol(simbolo.sesion2, yychar,yyline,new String(yytext()));
          }
        case 82: break;
        case 31: 
          { return new Symbol(simbolo.error1, yychar,yyline,new String(yytext()));
          }
        case 83: break;
        case 23: 
          { return new Symbol(simbolo.fecha, yychar,yyline,new String(yytext()));
          }
        case 84: break;
        case 32: 
          { return new Symbol(simbolo.clave1, yychar,yyline,new String(yytext()));
          }
        case 85: break;
        case 61: 
          { return new Symbol(simbolo.usuarios2, yychar,yyline,new String(yytext()));
          }
        case 86: break;
        case 19: 
          { return new Symbol(simbolo.color, yychar,yyline,new String(yytext()));
          }
        case 87: break;
        case 33: 
          { return new Symbol(simbolo.fecha1, yychar,yyline,new String(yytext()));
          }
        case 88: break;
        case 66: 
          { return new Symbol(simbolo.destinatarios1, yychar,yyline,new String(yytext()));
          }
        case 89: break;
        case 64: 
          { return new Symbol(simbolo.destinatario1, yychar,yyline,new String(yytext()));
          }
        case 90: break;
        case 29: 
          { return new Symbol(simbolo.correos1, yychar,yyline,new String(yytext()));
          }
        case 91: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 92: break;
        case 58: 
          { return new Symbol(simbolo.contenido1, yychar,yyline,new String(yytext()));
          }
        case 93: break;
        case 8: 
          { return new Symbol(simbolo.igual, yychar,yyline,new String(yytext()));
          }
        case 94: break;
        case 28: 
          { return new Symbol(simbolo.tamanio, yychar,yyline,new String(yytext()));
          }
        case 95: break;
        case 9: 
          { return new Symbol(simbolo.coma, yychar,yyline,new String(yytext()));
          }
        case 96: break;
        case 37: 
          { return new Symbol(simbolo.archivo1, yychar,yyline,new String(yytext()));
          }
        case 97: break;
        case 39: 
          { return new Symbol(simbolo.nombre1, yychar,yyline,new String(yytext()));
          }
        case 98: break;
        case 24: 
          { return new Symbol(simbolo.sesion1, yychar,yyline,new String(yytext()));
          }
        case 99: break;
        case 4: 
          { return new Symbol(simbolo.cad, yychar,yyline,new String(yytext()));
          }
        case 100: break;
        case 17: 
          { return new Symbol(simbolo.hora, yychar,yyline,new String(yytext()));
          }
        case 101: break;
        case 41: 
          { return new Symbol(simbolo.celda2, yychar,yyline,new String(yytext()));
          }
        case 102: break;
        case 44: 
          { return new Symbol(simbolo.peticion, yychar,yyline,new String(yytext()));
          }
        case 103: break;
        case 6: 
          { return new Symbol(simbolo.cerrar, yychar,yyline,new String(yytext()));
          }
        case 104: break;
        case 56: 
          { return new Symbol(simbolo.usuario2, yychar,yyline,new String(yytext()));
          }
        case 105: break;
        case 57: 
          { return new Symbol(simbolo.usuarios1, yychar,yyline,new String(yytext()));
          }
        case 106: break;
        case 53: 
          { return new Symbol(simbolo.enviado2, yychar,yyline,new String(yytext()));
          }
        case 107: break;
        case 60: 
          { return new Symbol(simbolo.archivos2, yychar,yyline,new String(yytext()));
          }
        case 108: break;
        case 34: 
          { return new Symbol(simbolo.usuario, yychar,yyline,new String(yytext()));
          }
        case 109: break;
        case 35: 
          { return new Symbol(simbolo.registro, yychar,yyline,new String(yytext()));
          }
        case 110: break;
        case 12: 
          { return new Symbol(simbolo.de, yychar,yyline,new String(yytext()));
          }
        case 111: break;
        case 15: 
          { return new Symbol(simbolo.tipo, yychar,yyline,new String(yytext()));
          }
        case 112: break;
        case 5: 
          { return new Symbol(simbolo.abrir, yychar,yyline,new String(yytext()));
          }
        case 113: break;
        case 30: 
          { return new Symbol(simbolo.columna, yychar,yyline,new String(yytext()));
          }
        case 114: break;
        case 7: 
          { return new Symbol(simbolo.c2, yychar,yyline,new String(yytext()));
          }
        case 115: break;
        case 27: 
          { return new Symbol(simbolo.celda1, yychar,yyline,new String(yytext()));
          }
        case 116: break;
        case 20: 
          { return new Symbol(simbolo.de2, yychar,yyline,new String(yytext()));
          }
        case 117: break;
        case 50: 
          { return new Symbol(simbolo.usuario1, yychar,yyline,new String(yytext()));
          }
        case 118: break;
        case 45: 
          { return new Symbol(simbolo.enviado1, yychar,yyline,new String(yytext()));
          }
        case 119: break;
        case 3: 
          { return new Symbol(simbolo.signos, yychar,yyline,new String(yytext()));
          }
        case 120: break;
        case 52: 
          { return new Symbol(simbolo.archivos1, yychar,yyline,new String(yytext()));
          }
        case 121: break;
        case 63: 
          { return new Symbol(simbolo.listaC, yychar,yyline,new String(yytext()));
          }
        case 122: break;
        case 47: 
          { return new Symbol(simbolo.asunto2, yychar,yyline,new String(yytext()));
          }
        case 123: break;
        case 2: 
          { return new Symbol(simbolo.num, yychar,yyline,new String(yytext()));
          }
        case 124: break;
        case 11: 
          { return new Symbol(simbolo.id, yychar,yyline,new String(yytext()));
          }
        case 125: break;
        case 10: 
          { /* Se ignoran */
          }
        case 126: break;
        case 48: 
          { return new Symbol(simbolo.correo2, yychar,yyline,new String(yytext()));
          }
        case 127: break;
        case 13: 
          { return new Symbol(simbolo.pg, yychar,yyline,new String(yytext()));
          }
        case 128: break;
        case 26: 
          { return new Symbol(simbolo.correo_t, yychar,yyline,new String(yytext()));
          }
        case 129: break;
        case 59: 
          { return new Symbol(simbolo.registro2, yychar,yyline,new String(yytext()));
          }
        case 130: break;
        case 22: 
          { return new Symbol(simbolo.fecha_t, yychar,yyline,new String(yytext()));
          }
        case 131: break;
        case 65: 
          { return new Symbol(simbolo.correo, yychar,yyline,new String(yytext()));
          }
        case 132: break;
        case 40: 
          { return new Symbol(simbolo.error2, yychar,yyline,new String(yytext()));
          }
        case 133: break;
        case 14: 
          { return new Symbol(simbolo.de1, yychar,yyline,new String(yytext()));
          }
        case 134: break;
        case 18: 
          { return new Symbol(simbolo.envio, yychar,yyline,new String(yytext()));
          }
        case 135: break;
        case 16: 
          { return new Symbol(simbolo.fila, yychar,yyline,new String(yytext()));
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
