/* The following code was generated by JFlex 1.4.3 on 31/03/14 10:08 PM */

package parser_correo;
import java_cup.runtime.Symbol;

import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/03/14 10:08 PM from the specification file
 * <tt>scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\57\1\0\2\57\22\0\1\54\1\0\1\25\3\22"+
    "\4\0\2\22\1\27\1\20\1\2\1\35\12\1\1\21\1\22\1\23"+
    "\1\26\1\24\1\22\1\5\1\15\1\51\1\41\1\36\1\31\1\52"+
    "\1\43\1\53\1\32\2\3\1\46\1\50\1\34\1\33\1\40\1\3"+
    "\1\42\1\30\1\37\1\44\1\47\1\3\1\56\2\3\4\0\1\4"+
    "\1\0\1\45\1\51\1\16\1\13\1\7\1\52\1\43\1\53\1\12"+
    "\2\3\1\46\1\17\1\34\1\14\1\40\1\3\1\10\1\6\1\37"+
    "\1\44\1\11\1\3\1\56\2\3\65\0\1\22\16\0\1\22\21\0"+
    "\1\55\37\0\1\55\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\7\4\1\5\1\6\1\7"+
    "\1\10\1\11\5\4\1\12\1\4\2\2\2\0\1\4"+
    "\1\0\3\4\1\13\1\4\1\14\1\4\11\0\3\4"+
    "\1\15\5\4\1\16\1\2\3\0\6\4\25\0\10\4"+
    "\5\0\7\4\4\0\1\17\26\0\1\20\5\4\1\21"+
    "\1\4\1\0\1\22\1\0\1\4\1\23\3\4\1\24"+
    "\1\4\20\0\1\25\13\0\3\4\1\26\1\27\1\4"+
    "\1\30\1\22\1\0\1\31\1\4\1\32\1\33\1\4"+
    "\6\0\1\34\24\0\1\35\2\4\1\0\1\4\2\0"+
    "\1\4\1\36\1\37\1\40\7\0\1\41\20\0\1\42"+
    "\1\4\1\43\1\0\1\44\1\30\1\0\1\45\3\0"+
    "\1\46\1\47\1\50\1\0\1\51\1\0\1\52\5\0"+
    "\1\53\2\0\1\54\2\0\1\55\1\0\1\56\2\0"+
    "\1\57\4\0\1\60\3\0\1\61\2\0\1\62\1\0"+
    "\1\63\2\0\1\64\2\0\1\65\1\0\1\66\1\0"+
    "\1\67\3\0\1\70\1\71\2\0\1\72\1\73\3\0"+
    "\1\74\1\75\1\0\1\76\1\0\1\77\4\0\1\100"+
    "\4\0\1\101\2\0\1\102\1\0\1\103\1\104\1\0"+
    "\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\60\0\60\0\60\0\60"+
    "\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\220\0\u0510\0\220\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\220\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\220\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\60\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\220\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\220\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\220\0\u18f0\0\u1920\0\u1950\0\220\0\u1980\0\u19b0"+
    "\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30"+
    "\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\60"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00"+
    "\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\220"+
    "\0\u1f80\0\u1fb0\0\60\0\u1fe0\0\220\0\u2010\0\220\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\60"+
    "\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310"+
    "\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490"+
    "\0\u24c0\0\u24f0\0\u2520\0\u2550\0\220\0\u2580\0\u25b0\0\u25e0"+
    "\0\u2610\0\u2640\0\u2670\0\u26a0\0\220\0\220\0\60\0\u26d0"+
    "\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\60\0\u2820"+
    "\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0"+
    "\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\60"+
    "\0\u2b20\0\220\0\u2b50\0\220\0\60\0\u2b80\0\220\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\60\0\u2c40\0\60\0\u2c70\0\60\0\u2ca0"+
    "\0\60\0\u2cd0\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\60\0\u2dc0"+
    "\0\u2df0\0\60\0\u2e20\0\u2e50\0\60\0\u2e80\0\220\0\u2eb0"+
    "\0\u2ee0\0\60\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\60\0\u2fd0"+
    "\0\u3000\0\u3030\0\60\0\u3060\0\u3090\0\60\0\u30c0\0\60"+
    "\0\u30f0\0\u3120\0\60\0\u3150\0\u3180\0\60\0\u31b0\0\60"+
    "\0\u31e0\0\60\0\u3210\0\u3240\0\u3270\0\60\0\60\0\u32a0"+
    "\0\u32d0\0\60\0\60\0\u3300\0\u3330\0\u3360\0\60\0\60"+
    "\0\u3390\0\60\0\u33c0\0\60\0\u33f0\0\u3420\0\u3450\0\u3480"+
    "\0\60\0\u34b0\0\u34e0\0\u3510\0\u3540\0\60\0\u3570\0\u35a0"+
    "\0\60\0\u35d0\0\60\0\60\0\u3600\0\60\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\7\1\10"+
    "\1\5\1\11\1\12\2\5\1\13\1\5\3\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\6\1\7\1\11\2\5"+
    "\1\4\1\12\1\21\1\22\1\13\1\10\1\5\1\23"+
    "\1\5\1\24\3\5\1\25\1\5\1\26\1\5\1\27"+
    "\1\26\61\0\1\30\1\31\15\0\1\32\1\33\37\0"+
    "\1\34\1\0\2\5\1\35\12\5\10\0\5\5\1\0"+
    "\16\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\1\5\1\36\10\5\10\0\1\5\1\36\3\5\1\0"+
    "\16\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\12\5\10\0\4\5\1\37\1\0\16\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\1\5\1\40\10\5"+
    "\10\0\1\5\1\40\3\5\1\0\16\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\5\5\1\41\4\5"+
    "\10\0\4\5\1\42\1\0\1\41\15\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\1\5\1\43\10\5"+
    "\10\0\1\5\1\43\3\5\1\0\16\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\6\5\1\44\3\5"+
    "\10\0\3\5\1\44\1\5\1\0\16\5\1\0\2\5"+
    "\10\0\1\45\1\46\2\0\1\47\1\0\1\50\1\51"+
    "\12\0\1\45\2\0\1\52\1\53\1\47\2\0\1\51"+
    "\1\46\1\0\1\54\1\50\4\0\1\55\6\0\1\34"+
    "\1\0\2\5\1\35\4\5\1\56\2\5\1\57\2\5"+
    "\10\0\2\5\1\56\2\5\1\0\7\5\1\57\6\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\1\5"+
    "\1\60\10\5\10\0\1\5\1\60\3\5\1\0\5\5"+
    "\1\61\10\5\1\0\2\5\2\0\1\34\1\0\2\5"+
    "\1\35\1\62\11\5\10\0\1\62\4\5\1\0\16\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\4\5"+
    "\1\63\5\5\10\0\2\5\1\63\2\5\1\0\16\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\1\5"+
    "\1\64\2\5\1\65\1\5\1\66\3\5\10\0\1\5"+
    "\1\64\1\65\1\66\1\5\1\0\16\5\1\0\2\5"+
    "\55\0\1\26\2\0\1\26\1\0\1\34\1\0\2\5"+
    "\1\35\12\5\10\0\5\5\1\0\10\5\1\67\5\5"+
    "\1\0\2\5\2\0\1\70\1\31\15\0\1\32\1\33"+
    "\37\0\1\31\57\0\1\71\57\0\1\72\57\0\1\34"+
    "\3\5\1\35\12\5\10\0\5\5\1\0\16\5\1\0"+
    "\2\5\7\0\1\73\52\0\1\34\1\0\2\5\1\35"+
    "\1\74\11\5\10\0\1\74\4\5\1\0\16\5\1\0"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\3\5\1\75"+
    "\6\5\10\0\5\5\1\0\11\5\1\75\4\5\1\0"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\12\5\10\0"+
    "\5\5\1\0\5\5\1\76\10\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\4\5\1\77\5\5\10\0"+
    "\2\5\1\77\2\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\2\5\1\100\7\5\10\0"+
    "\5\5\1\0\4\5\1\100\3\5\1\101\5\5\1\0"+
    "\2\5\11\0\1\102\23\0\1\103\5\0\1\102\24\0"+
    "\1\104\21\0\1\104\35\0\1\105\21\0\1\105\34\0"+
    "\1\106\1\0\1\107\17\0\1\106\11\0\1\107\24\0"+
    "\1\110\4\0\1\111\14\0\1\110\1\0\1\111\12\0"+
    "\1\112\25\0\1\113\16\0\1\113\32\0\1\114\1\115"+
    "\1\116\2\0\1\117\1\0\1\120\1\121\11\0\1\114"+
    "\1\115\2\0\1\122\1\0\1\117\2\0\1\121\1\116"+
    "\1\0\1\123\1\120\4\0\1\124\13\0\1\125\21\0"+
    "\1\125\36\0\1\126\21\0\1\126\27\0\1\34\1\0"+
    "\2\5\1\35\12\5\10\0\5\5\1\0\2\5\1\127"+
    "\13\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\11\5\1\130\10\0\5\5\1\0\12\5\1\130\3\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\12\5"+
    "\10\0\5\5\1\0\1\5\1\131\14\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\12\5\10\0\5\5"+
    "\1\0\6\5\1\132\7\5\1\0\2\5\2\0\1\34"+
    "\1\0\2\5\1\35\1\133\11\5\10\0\1\133\4\5"+
    "\1\0\16\5\1\0\2\5\2\0\1\34\1\0\2\5"+
    "\1\35\10\5\1\134\1\5\10\0\5\5\1\0\3\5"+
    "\1\134\12\5\1\0\2\5\2\0\1\34\1\0\2\5"+
    "\1\35\12\5\10\0\5\5\1\0\10\5\1\135\5\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\2\5"+
    "\1\136\7\5\10\0\5\5\1\0\4\5\1\136\11\5"+
    "\1\0\2\5\2\0\1\70\1\31\56\0\1\137\16\0"+
    "\1\140\40\0\1\141\17\0\1\142\45\0\1\143\51\0"+
    "\1\34\1\0\2\5\1\35\4\5\1\144\5\5\10\0"+
    "\2\5\1\144\2\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\4\5\1\145\5\5\10\0"+
    "\2\5\1\145\2\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\4\5\1\146\5\5\10\0"+
    "\2\5\1\146\2\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\10\5\1\147\1\5\10\0"+
    "\5\5\1\0\3\5\1\147\12\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\2\5\1\150\7\5\10\0"+
    "\5\5\1\0\4\5\1\150\11\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\6\5\1\151\3\5\10\0"+
    "\3\5\1\151\1\5\1\0\6\5\1\152\7\5\1\0"+
    "\2\5\11\0\1\153\31\0\1\153\26\0\1\154\35\0"+
    "\1\154\53\0\1\155\22\0\1\156\15\0\1\157\3\0"+
    "\1\156\73\0\1\160\31\0\1\161\22\0\1\161\64\0"+
    "\1\162\21\0\1\163\23\0\1\164\5\0\1\163\32\0"+
    "\1\165\27\0\1\165\31\0\1\166\30\0\1\166\16\0"+
    "\1\167\21\0\1\167\36\0\1\170\23\0\1\171\5\0"+
    "\1\170\24\0\1\172\21\0\1\172\35\0\1\173\21\0"+
    "\1\173\34\0\1\174\1\0\1\175\17\0\1\174\11\0"+
    "\1\175\24\0\1\176\4\0\1\177\14\0\1\176\1\0"+
    "\1\177\12\0\1\200\25\0\1\201\16\0\1\201\32\0"+
    "\1\202\21\0\1\202\36\0\1\203\21\0\1\203\72\0"+
    "\1\204\31\0\1\205\22\0\1\205\17\0\1\34\1\0"+
    "\2\5\1\35\6\5\1\206\3\5\10\0\3\5\1\206"+
    "\1\5\1\0\16\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\7\5\1\207\2\5\10\0\5\5\1\0"+
    "\7\5\1\207\6\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\4\5\1\210\5\5\10\0\2\5\1\210"+
    "\2\5\1\0\16\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\7\5\1\211\2\5\10\0\5\5\1\0"+
    "\7\5\1\211\6\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\12\5\10\0\5\5\1\0\1\5\1\212"+
    "\14\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\12\5\10\0\5\5\1\0\15\5\1\213\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\7\5\1\214\2\5"+
    "\10\0\5\5\1\0\7\5\1\214\6\5\1\0\2\5"+
    "\2\0\1\34\1\0\2\5\1\35\11\5\1\215\10\0"+
    "\5\5\1\0\12\5\1\215\3\5\1\0\2\5\21\0"+
    "\1\140\40\0\1\216\77\0\1\142\37\0\1\217\66\0"+
    "\1\220\50\0\1\34\1\0\2\5\1\35\6\5\1\221"+
    "\3\5\10\0\3\5\1\221\1\5\1\0\16\5\1\0"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\6\5\1\222"+
    "\3\5\10\0\3\5\1\222\1\5\1\0\16\5\1\0"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\1\223\11\5"+
    "\10\0\1\223\4\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\4\5\1\224\5\5\10\0"+
    "\2\5\1\224\2\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\1\5\1\225\10\5\10\0"+
    "\1\5\1\225\3\5\1\0\16\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\2\5\1\226\7\5\10\0"+
    "\5\5\1\0\4\5\1\226\11\5\1\0\2\5\2\0"+
    "\1\34\1\0\2\5\1\35\11\5\1\227\10\0\5\5"+
    "\1\0\12\5\1\227\3\5\1\0\2\5\15\0\1\230"+
    "\16\0\1\230\36\0\1\231\17\0\1\231\37\0\1\232"+
    "\17\0\1\232\64\0\1\233\54\0\1\234\76\0\1\235"+
    "\17\0\1\236\22\0\1\236\31\0\1\237\31\0\1\237"+
    "\54\0\1\240\31\0\1\241\35\0\1\241\61\0\1\242"+
    "\14\0\1\243\21\0\1\243\37\0\1\244\31\0\1\244"+
    "\26\0\1\245\35\0\1\245\53\0\1\246\22\0\1\247"+
    "\15\0\1\250\3\0\1\247\73\0\1\251\31\0\1\252"+
    "\22\0\1\252\64\0\1\253\21\0\1\254\23\0\1\255"+
    "\5\0\1\254\32\0\1\256\27\0\1\256\31\0\1\257"+
    "\30\0\1\257\53\0\1\260\31\0\1\261\22\0\1\261"+
    "\33\0\1\262\27\0\1\262\65\0\1\263\5\0\1\34"+
    "\1\0\2\5\1\35\12\5\10\0\5\5\1\0\16\5"+
    "\1\0\1\264\1\5\2\0\1\34\1\0\2\5\1\35"+
    "\10\5\1\265\1\5\10\0\5\5\1\0\3\5\1\265"+
    "\12\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\2\5\1\266\7\5\10\0\5\5\1\0\4\5\1\266"+
    "\11\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\7\5\1\267\2\5\10\0\5\5\1\0\7\5\1\267"+
    "\6\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\7\5\1\270\2\5\10\0\5\5\1\0\7\5\1\270"+
    "\6\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\12\5\10\0\5\5\1\0\6\5\1\271\7\5\1\0"+
    "\2\5\2\0\1\272\57\0\1\273\67\0\1\274\47\0"+
    "\1\34\1\0\2\5\1\35\12\5\10\0\4\5\1\275"+
    "\1\0\16\5\1\0\2\5\2\0\1\34\1\0\2\5"+
    "\1\35\12\5\10\0\5\5\1\0\1\5\1\276\14\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\6\5"+
    "\1\277\3\5\10\0\3\5\1\277\1\5\1\0\16\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\6\5"+
    "\1\300\3\5\10\0\3\5\1\300\1\5\1\0\16\5"+
    "\1\0\2\5\2\0\1\34\1\0\2\5\1\35\12\5"+
    "\10\0\4\5\1\301\1\0\16\5\1\0\2\5\11\0"+
    "\1\302\31\0\1\302\32\0\1\303\27\0\1\303\20\0"+
    "\1\304\21\0\1\304\41\0\1\305\17\0\1\305\64\0"+
    "\1\306\32\0\1\307\17\0\1\307\42\0\1\310\27\0"+
    "\1\310\21\0\1\311\21\0\1\311\35\0\1\312\21\0"+
    "\1\312\35\0\1\313\21\0\1\313\36\0\1\314\31\0"+
    "\1\314\27\0\1\315\17\0\1\315\41\0\1\316\16\0"+
    "\1\316\36\0\1\317\17\0\1\317\37\0\1\320\17\0"+
    "\1\320\64\0\1\321\54\0\1\322\76\0\1\323\17\0"+
    "\1\324\22\0\1\324\31\0\1\325\31\0\1\325\54\0"+
    "\1\326\31\0\1\327\35\0\1\327\61\0\1\330\23\0"+
    "\1\331\27\0\1\331\65\0\1\332\14\0\1\333\31\0"+
    "\1\333\32\0\1\334\27\0\1\334\13\0\1\34\1\0"+
    "\2\5\1\35\6\5\1\335\3\5\10\0\3\5\1\335"+
    "\1\5\1\0\16\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\4\5\1\336\5\5\10\0\2\5\1\336"+
    "\2\5\1\0\16\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\4\5\1\337\5\5\10\0\2\5\1\337"+
    "\2\5\1\0\16\5\1\0\2\5\2\0\1\34\1\0"+
    "\2\5\1\35\12\5\10\0\5\5\1\0\16\5\1\340"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\12\5\10\0"+
    "\5\5\1\0\10\5\1\341\5\5\1\0\2\5\2\0"+
    "\1\342\70\0\1\343\46\0\1\34\1\0\2\5\1\35"+
    "\2\5\1\344\7\5\10\0\5\5\1\0\4\5\1\344"+
    "\11\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\1\345\11\5\10\0\1\345\4\5\1\0\16\5\1\0"+
    "\2\5\2\0\1\34\1\0\2\5\1\35\7\5\1\346"+
    "\2\5\10\0\5\5\1\0\7\5\1\346\6\5\1\0"+
    "\2\5\25\0\1\347\46\0\1\350\22\0\1\350\60\0"+
    "\1\351\54\0\1\352\37\0\1\353\16\0\1\353\35\0"+
    "\1\354\35\0\1\354\24\0\1\355\16\0\1\355\60\0"+
    "\1\356\47\0\1\357\42\0\1\360\21\0\1\360\42\0"+
    "\1\361\16\0\1\361\34\0\1\362\31\0\1\362\32\0"+
    "\1\363\27\0\1\363\20\0\1\364\21\0\1\364\41\0"+
    "\1\365\17\0\1\365\64\0\1\366\32\0\1\367\17\0"+
    "\1\367\42\0\1\370\27\0\1\370\21\0\1\371\21\0"+
    "\1\371\35\0\1\372\21\0\1\372\35\0\1\373\21\0"+
    "\1\373\36\0\1\374\31\0\1\374\25\0\1\375\31\0"+
    "\1\375\32\0\1\376\27\0\1\376\24\0\1\377\17\0"+
    "\1\377\51\0\1\u0100\34\0\1\34\1\0\2\5\1\35"+
    "\6\5\1\u0101\3\5\10\0\3\5\1\u0101\1\5\1\0"+
    "\16\5\1\0\2\5\2\0\1\34\1\0\2\5\1\35"+
    "\6\5\1\u0102\3\5\10\0\3\5\1\u0102\1\5\1\0"+
    "\16\5\1\0\2\5\17\0\1\u0103\22\0\1\u0103\17\0"+
    "\1\34\1\0\2\5\1\35\7\5\1\u0104\2\5\10\0"+
    "\5\5\1\0\7\5\1\u0104\6\5\1\0\2\5\2\0"+
    "\1\u0105\71\0\1\u0106\45\0\1\34\1\0\2\5\1\35"+
    "\6\5\1\u0107\3\5\10\0\3\5\1\u0107\1\5\1\0"+
    "\16\5\1\0\2\5\15\0\1\u0108\16\0\1\u0108\34\0"+
    "\1\u0109\31\0\1\u0109\32\0\1\u010a\27\0\1\u010a\36\0"+
    "\1\u010b\47\0\1\u010c\16\0\1\u010c\50\0\1\u010d\45\0"+
    "\1\u010e\17\0\1\u010e\51\0\1\u010f\67\0\1\u0110\47\0"+
    "\1\u0111\46\0\1\u0112\22\0\1\u0112\60\0\1\u0113\54\0"+
    "\1\u0114\37\0\1\u0115\16\0\1\u0115\35\0\1\u0116\35\0"+
    "\1\u0116\34\0\1\u0117\47\0\1\u0118\16\0\1\u0118\60\0"+
    "\1\u0119\47\0\1\u011a\42\0\1\u011b\21\0\1\u011b\40\0"+
    "\1\u011c\17\0\1\u011c\51\0\1\u011d\47\0\1\u011e\16\0"+
    "\1\u011e\25\0\1\34\1\0\2\5\1\35\12\5\10\0"+
    "\4\5\1\u011f\1\0\16\5\1\0\2\5\15\0\1\u0120"+
    "\16\0\1\u0120\40\0\1\u0121\67\0\1\u0122\47\0\1\u0123"+
    "\16\0\1\u0123\63\0\1\u0124\26\0\1\u0125\21\0\1\u0125"+
    "\42\0\1\u0126\22\0\1\u0126\45\0\1\u0127\47\0\1\u0128"+
    "\16\0\1\u0128\34\0\1\u0129\31\0\1\u0129\32\0\1\u012a"+
    "\27\0\1\u012a\36\0\1\u012b\47\0\1\u012c\16\0\1\u012c"+
    "\32\0\1\u012d\15\0\1\u012e\3\0\1\u012d\41\0\1\u012f"+
    "\17\0\1\u012f\51\0\1\u0130\47\0\1\u0131\16\0\1\u0131"+
    "\32\0\1\u0132\15\0\1\u0133\3\0\1\u0132\37\0\1\u0134"+
    "\31\0\1\u0134\25\0\1\u0135\73\0\1\u0136\50\0\1\u0137"+
    "\27\0\1\u0137\36\0\1\u0138\47\0\1\u0139\16\0\1\u0139"+
    "\50\0\1\u013a\47\0\1\u013b\16\0\1\u013b\63\0\1\u013c"+
    "\26\0\1\u013d\15\0\1\u013e\3\0\1\u013d\53\0\1\u013f"+
    "\46\0\1\u0140\22\0\1\u0140\27\0\1\u0141\15\0\1\u0142"+
    "\3\0\1\u0141\53\0\1\u0143\43\0\1\u0144\31\0\1\u0144"+
    "\32\0\1\u0145\52\0\1\u0146\31\0\1\u0146\41\0\1\u0147"+
    "\57\0\1\u0148\50\0\1\u0149\27\0\1\u0149\36\0\1\u014a"+
    "\47\0\1\u014b\16\0\1\u014b\50\0\1\u014c\42\0\1\u014d"+
    "\21\0\1\u014d\30\0\1\u014e\67\0\1\u014f\17\0\1\u014f"+
    "\35\0\1\u0150\31\0\1\u0150\41\0\1\u0151\47\0\1\u0152"+
    "\16\0\1\u0152\42\0\1\u0153\55\0\1\u0154\16\0\1\u0154"+
    "\36\0\1\u0155\17\0\1\u0155\33\0\1\u0156\21\0\1\u0156"+
    "\43\0\1\u0157\51\0\1\u0158\15\0\1\u0159\3\0\1\u0158"+
    "\43\0\1\u015a\16\0\1\u015a\43\0\1\u015b\64\0\1\u015c"+
    "\41\0\1\u015d\15\0\1\u015e\3\0\1\u015d\53\0\1\u015f"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\4\11\11\1\2\0"+
    "\1\1\1\0\7\1\11\0\13\1\3\0\6\1\25\0"+
    "\10\1\5\0\7\1\4\0\1\11\26\0\10\1\1\0"+
    "\1\1\1\0\7\1\20\0\1\11\13\0\7\1\1\11"+
    "\1\0\5\1\6\0\1\11\24\0\3\1\1\0\1\1"+
    "\2\0\3\1\1\11\7\0\1\11\20\0\1\11\2\1"+
    "\1\0\1\1\1\11\1\0\1\1\3\0\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\1\2\0\1\11\4\0"+
    "\1\11\3\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\2\11\2\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\4\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* Lista con errores sintacticos */
public LinkedList<Errores> lista=new LinkedList<Errores>();
/* Metodo que es llamado al encontrar un error lexico */
private void ErrorScan(int linea, int columna, String valor){
lista.add(new Errores(linea, columna, "Error lexico en el caracter "+valor) );}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(simbolo.lista, yychar,yyline,new String(yytext()));
          }
        case 71: break;
        case 44: 
          { return new Symbol(simbolo.clave2, yychar,yyline,new String(yytext()));
          }
        case 72: break;
        case 38: 
          { return new Symbol(simbolo.asunto1, yychar,yyline,new String(yytext()));
          }
        case 73: break;
        case 45: 
          { return new Symbol(simbolo.fecha2, yychar,yyline,new String(yytext()));
          }
        case 74: break;
        case 70: 
          { return new Symbol(simbolo.destinatarios2, yychar,yyline,new String(yytext()));
          }
        case 75: break;
        case 64: 
          { return new Symbol(simbolo.contenido2, yychar,yyline,new String(yytext()));
          }
        case 76: break;
        case 69: 
          { return new Symbol(simbolo.destinatario2, yychar,yyline,new String(yytext()));
          }
        case 77: break;
        case 57: 
          { return new Symbol(simbolo.correos2, yychar,yyline,new String(yytext()));
          }
        case 78: break;
        case 40: 
          { return new Symbol(simbolo.correo1, yychar,yyline,new String(yytext()));
          }
        case 79: break;
        case 26: 
          { return new Symbol(simbolo.inicio, yychar,yyline,new String(yytext()));
          }
        case 80: break;
        case 53: 
          { return new Symbol(simbolo.registro1, yychar,yyline,new String(yytext()));
          }
        case 81: break;
        case 56: 
          { return new Symbol(simbolo.archivo2, yychar,yyline,new String(yytext()));
          }
        case 82: break;
        case 51: 
          { return new Symbol(simbolo.nombre2, yychar,yyline,new String(yytext()));
          }
        case 83: break;
        case 48: 
          { return new Symbol(simbolo.sesion2, yychar,yyline,new String(yytext()));
          }
        case 84: break;
        case 32: 
          { return new Symbol(simbolo.error1, yychar,yyline,new String(yytext()));
          }
        case 85: break;
        case 24: 
          { return new Symbol(simbolo.fecha, yychar,yyline,new String(yytext()));
          }
        case 86: break;
        case 33: 
          { return new Symbol(simbolo.clave1, yychar,yyline,new String(yytext()));
          }
        case 87: break;
        case 63: 
          { return new Symbol(simbolo.usuarios2, yychar,yyline,new String(yytext()));
          }
        case 88: break;
        case 20: 
          { return new Symbol(simbolo.color, yychar,yyline,new String(yytext()));
          }
        case 89: break;
        case 34: 
          { return new Symbol(simbolo.fecha1, yychar,yyline,new String(yytext()));
          }
        case 90: break;
        case 68: 
          { return new Symbol(simbolo.destinatarios1, yychar,yyline,new String(yytext()));
          }
        case 91: break;
        case 66: 
          { return new Symbol(simbolo.destinatario1, yychar,yyline,new String(yytext()));
          }
        case 92: break;
        case 30: 
          { return new Symbol(simbolo.correos1, yychar,yyline,new String(yytext()));
          }
        case 93: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 94: break;
        case 60: 
          { return new Symbol(simbolo.contenido1, yychar,yyline,new String(yytext()));
          }
        case 95: break;
        case 8: 
          { return new Symbol(simbolo.igual, yychar,yyline,new String(yytext()));
          }
        case 96: break;
        case 29: 
          { return new Symbol(simbolo.tamanio, yychar,yyline,new String(yytext()));
          }
        case 97: break;
        case 9: 
          { return new Symbol(simbolo.coma, yychar,yyline,new String(yytext()));
          }
        case 98: break;
        case 39: 
          { return new Symbol(simbolo.archivo1, yychar,yyline,new String(yytext()));
          }
        case 99: break;
        case 41: 
          { return new Symbol(simbolo.nombre1, yychar,yyline,new String(yytext()));
          }
        case 100: break;
        case 25: 
          { return new Symbol(simbolo.sesion1, yychar,yyline,new String(yytext()));
          }
        case 101: break;
        case 4: 
          { return new Symbol(simbolo.cad, yychar,yyline,new String(yytext()));
          }
        case 102: break;
        case 18: 
          { return new Symbol(simbolo.hora, yychar,yyline,new String(yytext()));
          }
        case 103: break;
        case 43: 
          { return new Symbol(simbolo.celda2, yychar,yyline,new String(yytext()));
          }
        case 104: break;
        case 46: 
          { return new Symbol(simbolo.peticion, yychar,yyline,new String(yytext()));
          }
        case 105: break;
        case 6: 
          { return new Symbol(simbolo.cerrar, yychar,yyline,new String(yytext()));
          }
        case 106: break;
        case 58: 
          { return new Symbol(simbolo.usuario2, yychar,yyline,new String(yytext()));
          }
        case 107: break;
        case 59: 
          { return new Symbol(simbolo.usuarios1, yychar,yyline,new String(yytext()));
          }
        case 108: break;
        case 55: 
          { return new Symbol(simbolo.enviado2, yychar,yyline,new String(yytext()));
          }
        case 109: break;
        case 62: 
          { return new Symbol(simbolo.archivos2, yychar,yyline,new String(yytext()));
          }
        case 110: break;
        case 37: 
          { return new Symbol(simbolo.registro, yychar,yyline,new String(yytext()));
          }
        case 111: break;
        case 35: 
          { return new Symbol(simbolo.usuario, yychar,yyline,new String(yytext()));
          }
        case 112: break;
        case 12: 
          { return new Symbol(simbolo.de, yychar,yyline,new String(yytext()));
          }
        case 113: break;
        case 16: 
          { return new Symbol(simbolo.tipo, yychar,yyline,new String(yytext()));
          }
        case 114: break;
        case 36: 
          { return new Symbol(simbolo.formula, yychar,yyline,new String(yytext()));
          }
        case 115: break;
        case 5: 
          { return new Symbol(simbolo.abrir, yychar,yyline,new String(yytext()));
          }
        case 116: break;
        case 31: 
          { return new Symbol(simbolo.columna, yychar,yyline,new String(yytext()));
          }
        case 117: break;
        case 7: 
          { return new Symbol(simbolo.c2, yychar,yyline,new String(yytext()));
          }
        case 118: break;
        case 28: 
          { return new Symbol(simbolo.celda1, yychar,yyline,new String(yytext()));
          }
        case 119: break;
        case 21: 
          { return new Symbol(simbolo.de2, yychar,yyline,new String(yytext()));
          }
        case 120: break;
        case 52: 
          { return new Symbol(simbolo.usuario1, yychar,yyline,new String(yytext()));
          }
        case 121: break;
        case 47: 
          { return new Symbol(simbolo.enviado1, yychar,yyline,new String(yytext()));
          }
        case 122: break;
        case 3: 
          { return new Symbol(simbolo.signos, yychar,yyline,new String(yytext()));
          }
        case 123: break;
        case 54: 
          { return new Symbol(simbolo.archivos1, yychar,yyline,new String(yytext()));
          }
        case 124: break;
        case 65: 
          { return new Symbol(simbolo.listaC, yychar,yyline,new String(yytext()));
          }
        case 125: break;
        case 49: 
          { return new Symbol(simbolo.asunto2, yychar,yyline,new String(yytext()));
          }
        case 126: break;
        case 2: 
          { return new Symbol(simbolo.num, yychar,yyline,new String(yytext()));
          }
        case 127: break;
        case 11: 
          { return new Symbol(simbolo.id, yychar,yyline,new String(yytext()));
          }
        case 128: break;
        case 10: 
          { /* Se ignoran */
          }
        case 129: break;
        case 14: 
          { return new Symbol(simbolo.xl, yychar,yyline,new String(yytext()));
          }
        case 130: break;
        case 50: 
          { return new Symbol(simbolo.correo2, yychar,yyline,new String(yytext()));
          }
        case 131: break;
        case 13: 
          { return new Symbol(simbolo.pg, yychar,yyline,new String(yytext()));
          }
        case 132: break;
        case 27: 
          { return new Symbol(simbolo.correo_t, yychar,yyline,new String(yytext()));
          }
        case 133: break;
        case 61: 
          { return new Symbol(simbolo.registro2, yychar,yyline,new String(yytext()));
          }
        case 134: break;
        case 23: 
          { return new Symbol(simbolo.fecha_t, yychar,yyline,new String(yytext()));
          }
        case 135: break;
        case 67: 
          { return new Symbol(simbolo.correo, yychar,yyline,new String(yytext()));
          }
        case 136: break;
        case 42: 
          { return new Symbol(simbolo.error2, yychar,yyline,new String(yytext()));
          }
        case 137: break;
        case 15: 
          { return new Symbol(simbolo.de1, yychar,yyline,new String(yytext()));
          }
        case 138: break;
        case 19: 
          { return new Symbol(simbolo.envio, yychar,yyline,new String(yytext()));
          }
        case 139: break;
        case 17: 
          { return new Symbol(simbolo.fila, yychar,yyline,new String(yytext()));
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
