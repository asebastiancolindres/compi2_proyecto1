
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 12 22:41:16 CST 2014
//----------------------------------------------------

package parser;

import java.io.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 12 22:41:16 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\007\021\000" +
    "\002\010\006\000\002\011\006\000\002\012\010\000\002" +
    "\013\005\000\002\014\005\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\017\006\000\002\020\010" +
    "\000\002\021\006\000\002\022\021\000\002\023\006\000" +
    "\002\024\005\000\002\003\014\000\002\004\005\000\002" +
    "\004\005\000\002\005\004\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\033\021" +
    "\000\002\034\005\000\002\025\014\000\002\026\004\000" +
    "\002\026\003\000\002\027\027\000\002\030\021\000\002" +
    "\031\004\000\002\031\003\000\002\032\030" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\014\013\022\007\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufffc\001\002\000\004\002\uffff" +
    "\001\002\000\006\026\054\047\053\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\002\ufffa" +
    "\001\002\000\004\030\017\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\016\001\002\000\004\002\001\001\002" +
    "\000\004\030\024\001\002\000\006\015\ufff2\030\017\001" +
    "\002\000\004\015\022\001\002\000\004\002\ufff4\001\002" +
    "\000\004\015\ufff3\001\002\000\004\020\025\001\002\000" +
    "\004\031\026\001\002\000\004\034\027\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\006\015\ufff1\030" +
    "\ufff1\001\002\000\004\035\037\001\002\000\030\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\033\uffe4\035\uffe4\041\uffe4\043" +
    "\uffe4\054\uffe4\056\uffe4\060\uffe4\001\002\000\030\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\033\uffe5\035\uffe5\041\uffe5\043" +
    "\uffe5\054\uffe5\056\uffe5\060\uffe5\001\002\000\030\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\033\uffe3\035\uffe3\041\uffe3\043" +
    "\uffe3\054\uffe3\056\uffe3\060\uffe3\001\002\000\030\004\034" +
    "\005\032\006\033\007\uffe6\033\uffe6\035\uffe6\041\uffe6\043" +
    "\uffe6\054\uffe6\056\uffe6\060\uffe6\001\002\000\022\007\uffe7" +
    "\033\uffe7\035\uffe7\041\uffe7\043\uffe7\054\uffe7\056\uffe7\060" +
    "\uffe7\001\002\000\004\036\040\001\002\000\004\010\042" +
    "\001\002\000\006\015\ufff0\030\ufff0\001\002\000\004\024" +
    "\043\001\002\000\004\011\044\001\002\000\004\037\045" +
    "\001\002\000\004\032\047\001\002\000\006\015\uffef\030" +
    "\uffef\001\002\000\010\004\034\005\032\006\033\001\002" +
    "\000\004\033\051\001\002\000\004\031\052\001\002\000" +
    "\006\015\uffee\030\uffee\001\002\000\004\046\210\001\002" +
    "\000\004\016\055\001\002\000\004\025\056\001\002\000" +
    "\004\007\057\001\002\000\004\020\060\001\002\000\004" +
    "\007\061\001\002\000\010\017\063\023\064\044\062\001" +
    "\002\000\004\025\176\001\002\000\004\025\075\001\002" +
    "\000\006\040\066\042\067\001\002\000\004\027\074\001" +
    "\002\000\010\004\034\005\032\006\033\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\004\043\071\001" +
    "\002\000\004\027\uffe9\001\002\000\004\041\073\001\002" +
    "\000\004\027\uffe8\001\002\000\004\002\uffea\001\002\000" +
    "\004\007\076\001\002\000\014\004\034\005\032\006\033" +
    "\013\101\021\100\001\002\000\004\007\142\001\002\000" +
    "\004\007\115\001\002\000\004\007\102\001\002\000\004" +
    "\023\103\001\002\000\004\030\104\001\002\000\004\020" +
    "\107\001\002\000\004\027\106\001\002\000\004\002\uffed" +
    "\001\002\000\004\031\110\001\002\000\004\032\111\001" +
    "\002\000\010\004\034\005\032\006\033\001\002\000\004" +
    "\027\uffec\001\002\000\004\033\114\001\002\000\004\027" +
    "\uffeb\001\002\000\004\023\116\001\002\000\004\030\117" +
    "\001\002\000\004\020\122\001\002\000\004\027\121\001" +
    "\002\000\004\002\ufff9\001\002\000\004\031\123\001\002" +
    "\000\004\034\124\001\002\000\010\004\034\005\032\006" +
    "\033\001\002\000\004\027\ufff8\001\002\000\004\035\127" +
    "\001\002\000\004\036\130\001\002\000\004\010\132\001" +
    "\002\000\004\027\ufff7\001\002\000\004\024\133\001\002" +
    "\000\004\011\134\001\002\000\004\037\135\001\002\000" +
    "\004\032\137\001\002\000\004\027\ufff6\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\004\033\141\001" +
    "\002\000\004\027\ufff5\001\002\000\004\023\143\001\002" +
    "\000\004\051\145\001\002\000\006\027\uffda\051\145\001" +
    "\002\000\004\030\150\001\002\000\004\027\147\001\002" +
    "\000\004\002\uffdc\001\002\000\004\020\151\001\002\000" +
    "\004\031\152\001\002\000\004\034\153\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\004\035\155\001" +
    "\002\000\004\053\156\001\002\000\010\004\034\005\032" +
    "\006\033\001\002\000\004\054\160\001\002\000\004\036" +
    "\161\001\002\000\004\010\162\001\002\000\004\024\163" +
    "\001\002\000\004\011\164\001\002\000\004\037\165\001" +
    "\002\000\004\055\166\001\002\000\010\004\034\005\032" +
    "\006\033\001\002\000\004\056\170\001\002\000\004\034" +
    "\171\001\002\000\010\004\034\005\032\006\033\001\002" +
    "\000\004\035\173\001\002\000\004\052\174\001\002\000" +
    "\006\027\uffd9\051\uffd9\001\002\000\004\027\uffdb\001\002" +
    "\000\004\007\177\001\002\000\004\045\200\001\002\000" +
    "\004\007\201\001\002\000\004\023\202\001\002\000\004" +
    "\030\204\001\002\000\004\027\207\001\002\000\004\020" +
    "\205\001\002\000\004\031\206\001\002\000\004\027\uffe1" +
    "\001\002\000\004\002\uffe2\001\002\000\004\025\211\001" +
    "\002\000\004\007\212\001\002\000\004\020\213\001\002" +
    "\000\004\007\214\001\002\000\004\023\215\001\002\000" +
    "\004\051\216\001\002\000\004\053\223\001\002\000\006" +
    "\050\uffde\051\216\001\002\000\004\050\221\001\002\000" +
    "\004\002\uffe0\001\002\000\004\050\uffdf\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\004\054\225\001" +
    "\002\000\004\036\226\001\002\000\004\010\227\001\002" +
    "\000\004\024\230\001\002\000\004\011\231\001\002\000" +
    "\004\037\232\001\002\000\004\055\233\001\002\000\010" +
    "\004\034\005\032\006\033\001\002\000\004\056\235\001" +
    "\002\000\004\034\236\001\002\000\010\004\034\005\032" +
    "\006\033\001\002\000\004\035\240\001\002\000\004\057" +
    "\241\001\002\000\010\004\034\005\032\006\033\001\002" +
    "\000\004\060\243\001\002\000\004\061\244\001\002\000" +
    "\004\062\245\001\002\000\004\052\246\001\002\000\006" +
    "\050\uffdd\051\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\022\002\014\003\007\007\010\014\005\022" +
    "\013\025\003\030\011\033\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\020\016\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\022" +
    "\016\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\027\001\001\000\006\005\030\006\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\035\006\034\001" +
    "\001\000\002\001\001\000\004\020\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\045\001\001\000\002" +
    "\001\001\000\006\005\047\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\006\005\071\006\034\001\001\000\006" +
    "\005\067\006\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\076\006\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\111\001\001\000\006\005\112\006\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\124\001\001\000\006\005\125\006\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\135\001\001" +
    "\000\002\001\001\000\006\005\137\006\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\145\032\143\001\001\000\006\031\174\032\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\153\006\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\156\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\166\006\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\171\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\217\027\216\001\001\000\002\001\001\000\006\026\221" +
    "\027\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\223\006\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\233\006\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\236\006\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\241\006\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public  String lUsuario;
public  String lNombre;
public  String pass;

public String msjCuenta;

    
        public LinkedList<Errores> lista=new LinkedList<Errores>();
        public LinkedList<listaUsuarios> listaU=new LinkedList<listaUsuarios>();
        public listaUsuarios usuario = new listaUsuarios();
        public LinkedList<listaMensajes> listaM =new LinkedList<listaMensajes>();

        /*Variable de salida*/
        public String Salida=new String();

            /**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
       // System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        lista.add(new Errores(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
}
             /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       // System.out.println("Error en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
       // lista.add(new Errores(s.right+1,s.left,"Error sintactico2 Identificador " +s.value + " no reconocido." ));
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RLC3 ::= correo1 usuario1 correo usuario2 nombre1 TEXTO nombre2 asunto1 TEXTO asunto2 fecha1 fecha coma hora fecha2 de1 TEXTO de2 nombre1 TEXTO nombre2 correo2 
            {
              listaMensajes RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t41left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t41right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t41 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t42left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t42right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t42 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.listaM.add(new listaMensajes(t1,t2, t3, t41+","+t42,t5,t6,"","")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RLC2 ::= RLC3 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RLC2 ::= RLC3 RLC2 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RLC1 ::= abrir sesion1 id igual c2 correo c2 tipo igual c2 TEXTO c2 cerrar RLC2 sesion2 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LC3 ::= correo1 asunto1 TEXTO asunto2 fecha1 fecha coma hora fecha2 de1 TEXTO de2 nombre1 TEXTO nombre2 contenido1 TEXTO contenido2 archivo1 archivo2 correo2 
            {
              listaMensajes RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int t21left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int t21right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String t21 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int t22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t22 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.listaM.add(new listaMensajes("","",t1,t21+","+t22,t3,t4,t5,"")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LC2 ::= LC3 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LC2 ::= LC3 LC2 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LC1 ::= abrir correos1 usuario igual c2 correo c2 cerrar LC2 correos2 
            {
              listaMensajes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PLC2 ::= usuario1 correo usuario2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.lUsuario = t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLC2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PLC1 ::= abrir sesion1 id igual c2 correo c2 peticion igual c2 listaC c2 cerrar PLC2 sesion2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLC1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CADENA ::= signos 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CADENA ::= num 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CADENA ::= cad 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TEXTO ::= CADENA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= t.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TEXTO ::= CADENA TEXTO 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  t1 = t1+" "+t2;  RESULT=t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RC2 ::= error1 TEXTO error2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.msjCuenta= t1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RC2 ::= registro1 TEXTO registro2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.msjCuenta= t1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RC1 ::= abrir sesion1 id igual c2 correo c2 cerrar RC2 sesion2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IS3 ::= clave1 TEXTO clave2 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 listaUsuarios l = new listaUsuarios();  l.setClave(t1);  RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IS2 ::= usuario1 correo usuario2 IS3 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setUsuario(t1);   l.setClave(nt1.getClave());  parser.usuario=l; RESULT= l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IS1 ::= abrir sesion1 id igual c2 correo c2 tipo igual c2 inicio c2 cerrar IS2 sesion2 
            {
              listaUsuarios RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // U6 ::= clave1 TEXTO clave2 usuario2 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 listaUsuarios l = new listaUsuarios();  l.setClave(t1);   RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // U5 ::= fecha1 fecha coma hora fecha2 U6 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setFecha(t1+","+t2); l.setClave(nt1.getClave());   RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // U4 ::= nombre1 TEXTO nombre2 U5 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setNombre(t1);  l.setFecha(nt1.getFecha()); l.setClave(nt1.getClave());  RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // U3 ::= usuario1 usuario1 correo usuario2 U4 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setUsuario(t1);  l.setNombre(nt1.getNombre());  l.setFecha(nt1.getFecha()); l.setClave(nt1.getClave());  parser.listaU.add(l); RESULT= l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // U2 ::= U3 
            {
              listaUsuarios RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // U2 ::= U3 U2 
            {
              listaUsuarios RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt2 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // U1 ::= usuarios1 U2 usuarios2 
            {
              listaUsuarios RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("U1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C5 ::= clave1 TEXTO clave2 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 listaUsuarios l = new listaUsuarios();  l.setClave(t1);   RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C5",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C4 ::= fecha1 fecha coma hora fecha2 C5 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setFecha(t1+","+t2); l.setClave(nt1.getClave());   RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C3 ::= nombre1 TEXTO nombre2 C4 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setNombre(t1);  l.setFecha(nt1.getFecha()); l.setClave(nt1.getClave());  RESULT= l;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // C2 ::= usuario1 correo usuario2 C3 
            {
              listaUsuarios RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		listaUsuarios nt1 = (listaUsuarios)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaUsuarios l = new listaUsuarios();  l.setUsuario(t1);  l.setNombre(nt1.getNombre());  l.setFecha(nt1.getFecha()); l.setClave(nt1.getClave());  parser.usuario=l; RESULT= l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C1 ::= abrir sesion1 id igual c2 correo c2 tipo igual c2 registro c2 cerrar C2 sesion2 
            {
              listaUsuarios RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIA ::= RLC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIA ::= LC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIA ::= PLC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIA ::= IS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIA ::= RC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIA ::= U1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= C1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

