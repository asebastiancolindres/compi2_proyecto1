
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 19 22:56:28 CST 2014
//----------------------------------------------------

package parser;

import java.io.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 19 22:56:28 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\021\000\002\004\020\000\002" +
    "\014\021\000\002\015\010\000\002\016\021\000\002\017" +
    "\005\000\002\005\004\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\022\000\002\012\014\000\002\013\005\000\002\013" +
    "\005\000\002\020\014\000\002\021\004\000\002\021\003" +
    "\000\002\022\027\000\002\023\021\000\002\024\004\000" +
    "\002\024\003\000\002\025\030\000\002\026\037\000\002" +
    "\027\027" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\013\015\023\006\054\007\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\ufffc\001\002\000\006" +
    "\027\101\052\100\001\002\000\004\031\054\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufff8\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\031\024\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\021\001" +
    "\002\000\004\002\001\001\002\000\006\014\uffe9\031\024" +
    "\001\002\000\004\014\052\001\002\000\004\031\025\001" +
    "\002\000\004\021\026\001\002\000\004\032\027\001\002" +
    "\000\004\035\030\001\002\000\012\004\034\005\032\006" +
    "\033\051\035\001\002\000\004\036\040\001\002\000\026" +
    "\004\uffee\005\uffee\006\uffee\034\uffee\036\uffee\042\uffee\044" +
    "\uffee\051\uffee\057\uffee\063\uffee\001\002\000\026\004\uffef" +
    "\005\uffef\006\uffef\034\uffef\036\uffef\042\uffef\044\uffef\051" +
    "\uffef\057\uffef\063\uffef\001\002\000\026\004\uffed\005\uffed" +
    "\006\uffed\034\uffed\036\uffed\042\uffed\044\uffed\051\uffed\057" +
    "\uffed\063\uffed\001\002\000\026\004\uffec\005\uffec\006\uffec" +
    "\034\uffec\036\uffec\042\uffec\044\uffec\051\uffec\057\uffec\063" +
    "\uffec\001\002\000\026\004\034\005\032\006\033\034\ufff0" +
    "\036\ufff0\042\ufff0\044\ufff0\051\035\057\ufff0\063\ufff0\001" +
    "\002\000\016\034\ufff1\036\ufff1\042\ufff1\044\ufff1\057\ufff1" +
    "\063\ufff1\001\002\000\004\037\041\001\002\000\004\010" +
    "\042\001\002\000\004\025\043\001\002\000\004\011\044" +
    "\001\002\000\004\040\045\001\002\000\004\033\046\001" +
    "\002\000\012\004\034\005\032\006\033\051\035\001\002" +
    "\000\004\034\050\001\002\000\004\032\051\001\002\000" +
    "\006\014\uffe8\031\uffe8\001\002\000\004\002\uffeb\001\002" +
    "\000\004\014\uffea\001\002\000\004\021\055\001\002\000" +
    "\004\032\056\001\002\000\004\056\057\001\002\000\012" +
    "\004\034\005\032\006\033\051\035\001\002\000\004\057" +
    "\061\001\002\000\004\037\062\001\002\000\004\010\063" +
    "\001\002\000\004\025\064\001\002\000\004\011\065\001" +
    "\002\000\004\040\066\001\002\000\004\060\067\001\002" +
    "\000\004\021\070\001\002\000\004\061\071\001\002\000" +
    "\004\062\072\001\002\000\012\004\034\005\032\006\033" +
    "\051\035\001\002\000\004\063\074\001\002\000\004\064" +
    "\075\001\002\000\004\065\076\001\002\000\004\055\077" +
    "\001\002\000\004\002\uffdb\001\002\000\004\051\254\001" +
    "\002\000\004\017\102\001\002\000\004\026\103\001\002" +
    "\000\004\007\104\001\002\000\004\016\105\001\002\000" +
    "\004\007\106\001\002\000\010\020\110\024\111\045\107" +
    "\001\002\000\004\026\217\001\002\000\004\026\122\001" +
    "\002\000\006\041\113\043\114\001\002\000\004\030\121" +
    "\001\002\000\012\004\034\005\032\006\033\051\035\001" +
    "\002\000\012\004\034\005\032\006\033\051\035\001\002" +
    "\000\004\044\116\001\002\000\004\030\uffe6\001\002\000" +
    "\004\042\120\001\002\000\004\030\uffe5\001\002\000\004" +
    "\002\uffe7\001\002\000\004\007\123\001\002\000\010\012" +
    "\126\022\124\050\125\001\002\000\004\007\175\001\002" +
    "\000\004\007\141\001\002\000\004\007\127\001\002\000" +
    "\004\024\130\001\002\000\004\031\131\001\002\000\004" +
    "\021\134\001\002\000\004\030\133\001\002\000\004\002" +
    "\ufff5\001\002\000\004\032\135\001\002\000\004\033\136" +
    "\001\002\000\012\004\034\005\032\006\033\051\035\001" +
    "\002\000\004\034\140\001\002\000\004\030\ufff4\001\002" +
    "\000\004\024\142\001\002\000\004\054\144\001\002\000" +
    "\006\030\uffde\054\144\001\002\000\004\031\147\001\002" +
    "\000\004\030\146\001\002\000\004\002\uffe0\001\002\000" +
    "\004\021\150\001\002\000\004\032\151\001\002\000\004" +
    "\035\152\001\002\000\012\004\034\005\032\006\033\051" +
    "\035\001\002\000\004\036\154\001\002\000\004\056\155" +
    "\001\002\000\012\004\034\005\032\006\033\051\035\001" +
    "\002\000\004\057\157\001\002\000\004\037\160\001\002" +
    "\000\004\010\161\001\002\000\004\025\162\001\002\000" +
    "\004\011\163\001\002\000\004\040\164\001\002\000\004" +
    "\060\165\001\002\000\004\021\166\001\002\000\004\061" +
    "\167\001\002\000\004\035\170\001\002\000\012\004\034" +
    "\005\032\006\033\051\035\001\002\000\004\036\172\001" +
    "\002\000\004\055\173\001\002\000\006\030\uffdd\054\uffdd" +
    "\001\002\000\004\030\uffdf\001\002\000\004\024\176\001" +
    "\002\000\004\031\177\001\002\000\004\021\202\001\002" +
    "\000\004\030\201\001\002\000\004\002\ufff7\001\002\000" +
    "\004\032\203\001\002\000\004\035\204\001\002\000\012" +
    "\004\034\005\032\006\033\051\035\001\002\000\004\036" +
    "\206\001\002\000\004\037\207\001\002\000\004\010\210" +
    "\001\002\000\004\025\211\001\002\000\004\011\212\001" +
    "\002\000\004\040\213\001\002\000\004\033\214\001\002" +
    "\000\012\004\034\005\032\006\033\051\035\001\002\000" +
    "\004\034\216\001\002\000\004\030\ufff6\001\002\000\004" +
    "\007\220\001\002\000\006\016\222\046\221\001\002\000" +
    "\004\007\245\001\002\000\004\007\223\001\002\000\004" +
    "\047\224\001\002\000\004\026\225\001\002\000\004\007" +
    "\226\001\002\000\004\021\227\001\002\000\004\007\230" +
    "\001\002\000\004\015\231\001\002\000\004\026\232\001" +
    "\002\000\004\007\233\001\002\000\004\010\234\001\002" +
    "\000\004\025\235\001\002\000\004\011\236\001\002\000" +
    "\004\007\237\001\002\000\004\024\240\001\002\000\004" +
    "\031\241\001\002\000\004\021\242\001\002\000\004\032" +
    "\243\001\002\000\004\030\244\001\002\000\004\002\uffdc" +
    "\001\002\000\004\024\246\001\002\000\004\031\250\001" +
    "\002\000\004\030\253\001\002\000\004\021\251\001\002" +
    "\000\004\032\252\001\002\000\004\030\ufff2\001\002\000" +
    "\004\002\ufff3\001\002\000\004\026\255\001\002\000\004" +
    "\007\256\001\002\000\004\021\257\001\002\000\004\007" +
    "\260\001\002\000\004\024\261\001\002\000\004\054\262" +
    "\001\002\000\004\056\267\001\002\000\006\053\uffe2\054" +
    "\262\001\002\000\004\053\265\001\002\000\004\002\uffe4" +
    "\001\002\000\004\053\uffe3\001\002\000\012\004\034\005" +
    "\032\006\033\051\035\001\002\000\004\057\271\001\002" +
    "\000\004\037\272\001\002\000\004\010\273\001\002\000" +
    "\004\025\274\001\002\000\004\011\275\001\002\000\004" +
    "\040\276\001\002\000\004\060\277\001\002\000\004\021" +
    "\300\001\002\000\004\061\301\001\002\000\004\035\302" +
    "\001\002\000\012\004\034\005\032\006\033\051\035\001" +
    "\002\000\004\036\304\001\002\000\004\062\305\001\002" +
    "\000\012\004\034\005\032\006\033\051\035\001\002\000" +
    "\004\063\307\001\002\000\004\064\310\001\002\000\004" +
    "\065\311\001\002\000\004\055\312\001\002\000\006\053" +
    "\uffe1\054\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\026\002\017\003\011\007\013\012\007\014" +
    "\015\016\004\020\003\023\012\026\016\027\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\022\011\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\052\011" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\030\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\036\006\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\046" +
    "\006\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\057\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\072\006\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\111\001\001\000\002" +
    "\001\001\000\006\005\116\006\035\001\001\000\006\005" +
    "\114\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\136\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\144\025\142\001\001\000" +
    "\006\024\173\025\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\152\006\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\155\006" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\170\006\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\204\006\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\214\006\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\263\022\262\001\001\000\002\001\001" +
    "\000\006\021\265\022\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\267\006\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\302\006\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\305\006\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public  String lUsuario;
public  String lNombre;
public  String pass;
public int respuesta;
public String msjCuenta;

    
        public LinkedList<Errores> lista         = new LinkedList<Errores>();
        public LinkedList<usuario> listaUsuarios = new LinkedList<usuario>();
        public usuario usuario;
        public LinkedList<correo> listaCorreos =new LinkedList<correo>();
        public correo correo;

        /*Variable de salida*/
        public String Salida=new String();

            /**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
       // System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        lista.add(new Errores(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
}
             /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       // System.out.println("Error en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
       // lista.add(new Errores(s.right+1,s.left,"Error sintactico2 Identificador " +s.value + " no reconocido." ));
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


int c=0;
String[] username;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RPC1 ::= correo1 usuario1 correo usuario2 asunto1 TEXTO asunto2 fecha1 fecha coma hora fecha2 de1 correo de2 contenido1 TEXTO contenido2 archivo1 archivo2 correo2 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int t31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int t31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String t31 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int t32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t32 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.respuesta=6; c++; parser.correo = new correo(c,t1,"",t2,t31+","+t32,t4,"",t5,""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RPC1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PC1 ::= abrir sesion1 id igual c2 correo_t c2 peticion igual c2 correo_t c2 de igual c2 correo c2 fecha_t igual c2 fecha coma hora c2 cerrar usuario1 correo usuario2 sesion2 
            {
              Object RESULT =null;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t21left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t21right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t21 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t22 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.respuesta=5; c++; parser.correo = new correo(c,t1,"","",t21+","+t22,t3,"", "", "");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PC1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RLC3 ::= correo1 usuario1 correo usuario2 nombre1 TEXTO nombre2 asunto1 TEXTO asunto2 fecha1 fecha coma hora fecha2 de1 correo de2 nombre1 TEXTO nombre2 correo2 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t41left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t41right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t41 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t42left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t42right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t42 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 c++; parser.listaCorreos.add(new correo(c,t1,t2,t3,t41+","+t42,t5,t6, "", ""));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RLC2 ::= RLC3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RLC2 ::= RLC3 RLC2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RLC1 ::= abrir sesion1 id igual c2 correo_t c2 tipo igual c2 lista c2 cerrar RLC2 sesion2 
            {
              Object RESULT =null;
		 parser.respuesta=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLC1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LC3 ::= correo1 asunto1 TEXTO asunto2 fecha1 fecha coma hora fecha2 de1 correo de2 nombre1 TEXTO nombre2 contenido1 TEXTO contenido2 archivo1 archivo2 correo2 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int t21left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int t21right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String t21 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int t22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t22 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 c++; parser.listaCorreos.add(new correo(c,"","",t1,t21+","+t22,t3,t4,t5,"")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LC2 ::= LC3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LC2 ::= LC3 LC2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LC1 ::= abrir correos1 usuario igual c2 correo c2 cerrar LC2 correos2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RC2 ::= error1 TEXTO error2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.msjCuenta= t1; parser.respuesta=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RC2 ::= registro1 TEXTO registro2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.msjCuenta= t1; parser.respuesta=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RC1 ::= abrir sesion1 id igual c2 correo_t c2 cerrar RC2 sesion2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RC1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LU3 ::= usuario1 usuario1 correo usuario2 nombre1 TEXTO nombre2 fecha1 fecha coma hora fecha2 clave1 TEXTO clave2 usuario2 
            {
              usuario RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t31 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t32 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 username = t1.split("@");  parser.listaUsuarios.add(new usuario(t1, username[0], t2, t31+","+t32, t4));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LU2 ::= LU3 
            {
              usuario RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		usuario nt1 = (usuario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LU2 ::= LU3 LU2 
            {
              usuario RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		usuario nt1 = (usuario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		usuario nt2 = (usuario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LU1 ::= usuarios1 LU2 usuarios2 
            {
              usuario RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CADENA ::= usuario 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CADENA ::= signos 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CADENA ::= num 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CADENA ::= cad 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TEXTO ::= CADENA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= t.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TEXTO ::= CADENA TEXTO 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  t1 = t1+" "+t2;  RESULT=t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PLC2 ::= usuario1 correo usuario2 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.lUsuario = t1; parser.respuesta= 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLC2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PLC1 ::= abrir sesion1 id igual c2 correo_t c2 peticion igual c2 listaC c2 cerrar PLC2 sesion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLC1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IS2 ::= usuario1 correo usuario2 clave1 TEXTO clave2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 username = t1.split("@"); parser.usuario = new usuario(t1, username[0], "", "", t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IS1 ::= abrir sesion1 id igual c2 correo_t c2 tipo igual c2 inicio c2 cerrar IS2 sesion2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C2 ::= usuario1 correo usuario2 nombre1 TEXTO nombre2 fecha1 fecha coma hora fecha2 clave1 TEXTO clave2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t31 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t32 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  username = t1.split("@"); parser.usuario = new usuario(t1, username[0], t2, t31+","+t32, t4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C1 ::= abrir sesion1 id igual c2 correo_t c2 tipo igual c2 registro c2 cerrar C2 sesion2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIA ::= RPC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIA ::= PC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIA ::= RLC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIA ::= LC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIA ::= PLC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIA ::= IS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIA ::= RC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIA ::= LU1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= C1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

