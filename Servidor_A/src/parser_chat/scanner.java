/* The following code was generated by JFlex 1.4.3 on 24/03/14 07:18 PM */

package parser_chat;
import java_cup.runtime.Symbol;

import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/03/14 07:18 PM from the specification file
 * <tt>scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\54\1\0\2\54\22\0\1\54\1\0\1\25\3\22"+
    "\4\0\2\22\1\27\1\20\1\2\1\35\12\1\1\21\1\22\1\23"+
    "\1\26\1\24\1\22\1\5\1\15\1\50\1\42\1\46\1\44\1\51"+
    "\1\32\1\52\1\33\2\3\1\30\1\47\1\34\1\31\1\53\1\3"+
    "\1\41\1\37\1\45\1\36\1\43\4\3\4\0\1\4\1\0\1\40"+
    "\1\50\1\16\1\13\1\7\1\51\1\32\1\52\1\12\2\3\1\30"+
    "\1\17\1\34\1\14\1\53\1\3\1\10\1\6\1\45\1\36\1\11"+
    "\4\3\65\0\1\22\16\0\1\22\21\0\1\3\37\0\1\3\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\2\2\0\1\4\14\0\1\2"+
    "\72\0\1\13\33\0\1\14\1\13\37\0\1\15\5\0"+
    "\1\16\1\17\17\0\1\20\1\14\2\0\1\21\1\22"+
    "\1\0\1\23\2\0\1\24\2\0\1\25\5\0\1\26"+
    "\1\27\2\0\1\30\7\0\1\31\1\32\1\0\1\33"+
    "\2\0\1\34\2\0\1\35\5\0\1\36\5\0\1\37"+
    "\1\40\3\0\1\41\1\42\1\0\1\43\4\0\1\44"+
    "\1\45\6\0\1\46\1\47\1\0\1\50\2\0\1\51"+
    "\6\0\1\52\1\0\1\53\1\0\1\54\2\0\1\55"+
    "\6\0\1\56\1\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\264\0\55\0\55"+
    "\0\55\0\55\0\341\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2"+
    "\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a"+
    "\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492"+
    "\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\55\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\55\0\u18f6\0\u1923\0\u1950"+
    "\0\u197d\0\u19aa\0\55\0\55\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\55\0\55\0\u1c7a\0\u1ca7\0\55"+
    "\0\55\0\u1cd4\0\55\0\u1d01\0\u1d2e\0\55\0\u1d5b\0\u1d88"+
    "\0\55\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\55\0\55"+
    "\0\u1e96\0\u1ec3\0\55\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4"+
    "\0\u1fd1\0\u1ffe\0\55\0\55\0\u202b\0\55\0\u2058\0\u2085"+
    "\0\55\0\u20b2\0\u20df\0\55\0\u210c\0\u2139\0\u2166\0\u2193"+
    "\0\u21c0\0\55\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\55"+
    "\0\55\0\u22ce\0\u22fb\0\u2328\0\55\0\55\0\u2355\0\55"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\55\0\55\0\u2436\0\u2463"+
    "\0\u2490\0\u24bd\0\u24ea\0\u2517\0\55\0\55\0\u2544\0\55"+
    "\0\u2571\0\u259e\0\55\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f"+
    "\0\u26ac\0\55\0\u26d9\0\55\0\u2706\0\55\0\u2733\0\u2760"+
    "\0\55\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\55"+
    "\0\u289b\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\12\5\3\4\1\6"+
    "\1\7\1\10\1\11\1\12\5\5\1\4\16\5\1\13"+
    "\56\0\1\14\1\15\15\0\1\16\1\17\34\0\1\20"+
    "\1\0\2\5\1\21\12\5\10\0\5\5\1\0\16\5"+
    "\7\0\1\22\1\23\1\24\1\0\1\25\1\26\2\0"+
    "\1\27\11\0\1\30\2\0\1\25\1\31\1\32\1\33"+
    "\1\22\1\0\1\24\1\27\1\0\1\23\1\0\1\26"+
    "\2\0\1\34\57\0\1\13\1\0\1\35\1\15\15\0"+
    "\1\16\1\17\34\0\1\15\54\0\1\36\54\0\1\37"+
    "\54\0\1\20\3\5\1\21\12\5\10\0\5\5\1\0"+
    "\16\5\7\0\1\40\62\0\1\41\14\0\1\41\31\0"+
    "\1\42\1\0\1\43\6\0\1\44\17\0\1\42\1\0"+
    "\1\43\5\0\1\44\14\0\1\45\34\0\1\45\44\0"+
    "\1\46\27\0\1\47\34\0\1\47\24\0\1\50\13\0"+
    "\1\51\1\50\37\0\1\52\14\0\1\52\37\0\1\53"+
    "\14\0\1\53\31\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\60\2\0\1\61\11\0\1\62\2\0\1\57\1\63"+
    "\1\0\1\64\1\54\1\0\1\56\1\61\1\0\1\55"+
    "\1\0\1\60\2\0\1\65\11\0\1\66\30\0\1\66"+
    "\24\0\1\67\34\0\1\67\11\0\1\35\1\15\53\0"+
    "\1\70\16\0\1\71\35\0\1\72\17\0\1\73\42\0"+
    "\1\74\75\0\1\75\71\0\1\76\17\0\1\77\30\0"+
    "\1\77\25\0\1\100\20\0\1\100\27\0\1\101\30\0"+
    "\1\101\27\0\1\102\20\0\1\102\27\0\1\103\30\0"+
    "\1\103\51\0\1\104\35\0\1\105\22\0\1\105\46\0"+
    "\1\106\41\0\1\107\27\0\1\107\21\0\1\110\14\0"+
    "\1\110\31\0\1\111\1\0\1\112\6\0\1\113\17\0"+
    "\1\111\1\0\1\112\5\0\1\113\14\0\1\114\34\0"+
    "\1\114\44\0\1\115\27\0\1\116\34\0\1\116\24\0"+
    "\1\117\13\0\1\120\1\117\37\0\1\121\14\0\1\121"+
    "\37\0\1\122\14\0\1\122\31\0\1\123\30\0\1\123"+
    "\24\0\1\124\34\0\1\124\46\0\1\125\34\0\1\126"+
    "\23\0\1\126\32\0\1\71\35\0\1\127\74\0\1\73"+
    "\34\0\1\130\63\0\1\131\56\0\1\132\20\0\1\132"+
    "\36\0\1\133\22\0\1\133\30\0\1\134\14\0\1\134"+
    "\31\0\1\135\30\0\1\135\70\0\1\136\17\0\1\137"+
    "\23\0\1\137\57\0\1\140\54\0\1\141\20\0\1\142"+
    "\31\0\1\142\23\0\1\143\20\0\1\143\71\0\1\144"+
    "\34\0\1\145\71\0\1\146\17\0\1\147\30\0\1\147"+
    "\25\0\1\150\20\0\1\150\27\0\1\151\30\0\1\151"+
    "\27\0\1\152\20\0\1\152\27\0\1\153\30\0\1\153"+
    "\51\0\1\154\35\0\1\155\22\0\1\155\46\0\1\156"+
    "\41\0\1\157\27\0\1\157\43\0\1\160\34\0\1\161"+
    "\23\0\1\161\27\0\1\162\22\0\1\162\66\0\1\163"+
    "\3\0\1\164\54\0\1\165\64\0\1\166\61\0\1\167"+
    "\23\0\1\167\25\0\1\170\32\0\1\170\16\0\1\171"+
    "\30\0\1\171\27\0\1\172\14\0\1\172\61\0\1\173"+
    "\30\0\1\174\20\0\1\174\33\0\1\175\20\0\1\175"+
    "\36\0\1\176\22\0\1\176\23\0\1\177\34\0\1\177"+
    "\44\0\1\200\30\0\1\201\30\0\1\201\25\0\1\202"+
    "\20\0\1\202\36\0\1\203\22\0\1\203\30\0\1\204"+
    "\14\0\1\204\31\0\1\205\30\0\1\205\70\0\1\206"+
    "\17\0\1\207\23\0\1\207\57\0\1\210\54\0\1\211"+
    "\20\0\1\212\31\0\1\212\23\0\1\213\20\0\1\213"+
    "\71\0\1\214\21\0\1\215\22\0\1\215\66\0\1\216"+
    "\12\0\1\217\30\0\1\217\30\0\1\220\22\0\1\220"+
    "\15\0\1\221\65\0\1\222\54\0\1\223\20\0\1\223"+
    "\35\0\1\224\14\0\1\224\47\0\1\225\40\0\1\226"+
    "\30\0\1\226\22\0\1\227\34\0\1\227\24\0\1\230"+
    "\14\0\1\230\57\0\1\231\36\0\1\232\23\0\1\232"+
    "\36\0\1\233\54\0\1\234\37\0\1\235\34\0\1\235"+
    "\26\0\1\236\23\0\1\236\25\0\1\237\32\0\1\237"+
    "\16\0\1\240\30\0\1\240\27\0\1\241\14\0\1\241"+
    "\61\0\1\242\30\0\1\243\20\0\1\243\33\0\1\244"+
    "\20\0\1\244\36\0\1\245\22\0\1\245\23\0\1\246"+
    "\34\0\1\246\44\0\1\247\30\0\1\250\30\0\1\250"+
    "\23\0\1\251\30\0\1\251\30\0\1\252\22\0\1\252"+
    "\26\0\1\253\20\0\1\253\45\0\1\254\31\0\1\255"+
    "\66\0\1\256\106\0\1\257\33\0\1\260\54\0\1\261"+
    "\36\0\1\262\30\0\1\262\41\0\1\263\45\0\1\264"+
    "\22\0\1\264\61\0\1\265\33\0\1\266\42\0\1\267"+
    "\20\0\1\267\35\0\1\270\14\0\1\270\47\0\1\271"+
    "\40\0\1\272\30\0\1\272\22\0\1\273\34\0\1\273"+
    "\24\0\1\274\14\0\1\274\57\0\1\275\36\0\1\276"+
    "\23\0\1\276\36\0\1\277\54\0\1\300\37\0\1\301"+
    "\34\0\1\301\22\0\1\302\20\0\1\302\45\0\1\303"+
    "\44\0\1\304\14\0\1\304\37\0\1\305\76\0\1\306"+
    "\63\0\1\307\54\0\1\310\23\0\1\311\14\0\1\311"+
    "\70\0\1\312\33\0\1\313\54\0\1\314\36\0\1\315"+
    "\30\0\1\315\41\0\1\316\45\0\1\317\22\0\1\317"+
    "\61\0\1\320\33\0\1\321\44\0\1\322\14\0\1\322"+
    "\31\0\1\323\15\0\1\324\12\0\1\323\25\0\1\325"+
    "\57\0\1\326\32\0\1\326\23\0\1\327\22\0\1\327"+
    "\31\0\1\330\22\0\1\330\22\0\1\331\15\0\1\332"+
    "\12\0\1\331\53\0\1\333\63\0\1\334\54\0\1\335"+
    "\23\0\1\336\14\0\1\336\31\0\1\337\15\0\1\340"+
    "\12\0\1\337\41\0\1\341\45\0\1\342\43\0\1\343"+
    "\2\0\1\344\14\0\1\345\17\0\1\344\34\0\1\346"+
    "\40\0\1\347\30\0\1\347\37\0\1\350\43\0\1\351"+
    "\32\0\1\351\23\0\1\352\22\0\1\352\31\0\1\353"+
    "\22\0\1\353\22\0\1\354\15\0\1\355\12\0\1\354"+
    "\41\0\1\356\32\0\1\357\67\0\1\360\22\0\1\360"+
    "\22\0\1\361\30\0\1\361\27\0\1\362\20\0\1\362"+
    "\25\0\1\363\2\0\1\364\14\0\1\365\17\0\1\364"+
    "\34\0\1\366\40\0\1\367\30\0\1\367\37\0\1\370"+
    "\46\0\1\371\55\0\1\372\27\0\1\372\31\0\1\373"+
    "\44\0\1\374\14\0\1\374\40\0\1\375\22\0\1\375"+
    "\22\0\1\376\30\0\1\376\27\0\1\377\20\0\1\377"+
    "\35\0\1\u0100\52\0\1\u0101\20\0\1\u0101\45\0\1\u0102"+
    "\47\0\1\u0103\27\0\1\u0103\31\0\1\u0104\44\0\1\u0105"+
    "\14\0\1\u0105\42\0\1\u0106\43\0\1\u0107\30\0\1\u0107"+
    "\27\0\1\u0108\20\0\1\u0108\45\0\1\u0109\75\0\1\u010a"+
    "\15\0\1\u010b\30\0\1\u010b\32\0\1\u010c\22\0\1\u010c"+
    "\61\0\1\u010d\22\0\1\u010e\32\0\1\u010e\23\0\1\u010f"+
    "\22\0\1\u010f\40\0\1\u0110\43\0\1\u0111\32\0\1\u0111"+
    "\32\0\1\u0112\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\4\11\3\1\2\0"+
    "\1\1\14\0\1\1\72\0\1\1\33\0\1\1\1\11"+
    "\37\0\1\11\5\0\2\11\17\0\2\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\5\0\2\11"+
    "\2\0\1\11\7\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\5\0\1\11\5\0\2\11\3\0\2\11"+
    "\1\0\1\11\4\0\2\11\6\0\2\11\1\0\1\11"+
    "\2\0\1\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\6\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* Lista con errores sintacticos */
public LinkedList<Errores> lista=new LinkedList<Errores>();
/* Metodo que es llamado al encontrar un error lexico */
private void ErrorScan(int linea, int columna, String valor){
lista.add(new Errores(linea, columna, "Error lexico en el caracter "+valor) );}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(simbolo.clave2, yychar,yyline,new String(yytext()));
          }
        case 48: break;
        case 41: 
          { return new Symbol(simbolo.solicitudes1, yychar,yyline,new String(yytext()));
          }
        case 49: break;
        case 15: 
          { return new Symbol(simbolo.login1, yychar,yyline,new String(yytext()));
          }
        case 50: break;
        case 19: 
          { return new Symbol(simbolo.inicio1, yychar,yyline,new String(yytext()));
          }
        case 51: break;
        case 24: 
          { return new Symbol(simbolo.fecha2, yychar,yyline,new String(yytext()));
          }
        case 52: break;
        case 38: 
          { return new Symbol(simbolo.solicitud2, yychar,yyline,new String(yytext()));
          }
        case 53: break;
        case 45: 
          { return new Symbol(simbolo.destinatario2, yychar,yyline,new String(yytext()));
          }
        case 54: break;
        case 28: 
          { return new Symbol(simbolo.nombre2, yychar,yyline,new String(yytext()));
          }
        case 55: break;
        case 13: 
          { return new Symbol(simbolo.error1, yychar,yyline,new String(yytext()));
          }
        case 56: break;
        case 36: 
          { return new Symbol(simbolo.contacto2, yychar,yyline,new String(yytext()));
          }
        case 57: break;
        case 12: 
          { return new Symbol(simbolo.fecha, yychar,yyline,new String(yytext()));
          }
        case 58: break;
        case 14: 
          { return new Symbol(simbolo.clave1, yychar,yyline,new String(yytext()));
          }
        case 59: break;
        case 39: 
          { return new Symbol(simbolo.respuesta2, yychar,yyline,new String(yytext()));
          }
        case 60: break;
        case 37: 
          { return new Symbol(simbolo.usuarios2, yychar,yyline,new String(yytext()));
          }
        case 61: break;
        case 33: 
          { return new Symbol(simbolo.solicitud1, yychar,yyline,new String(yytext()));
          }
        case 62: break;
        case 25: 
          { return new Symbol(simbolo.estado2, yychar,yyline,new String(yytext()));
          }
        case 63: break;
        case 16: 
          { return new Symbol(simbolo.fecha1, yychar,yyline,new String(yytext()));
          }
        case 64: break;
        case 42: 
          { return new Symbol(simbolo.destinatario1, yychar,yyline,new String(yytext()));
          }
        case 65: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 66: break;
        case 8: 
          { return new Symbol(simbolo.igual, yychar,yyline,new String(yytext()));
          }
        case 67: break;
        case 9: 
          { return new Symbol(simbolo.coma, yychar,yyline,new String(yytext()));
          }
        case 68: break;
        case 47: 
          { return new Symbol(simbolo.solicitudA2, yychar,yyline,new String(yytext()));
          }
        case 69: break;
        case 4: 
          { return new Symbol(simbolo.cad, yychar,yyline,new String(yytext()));
          }
        case 70: break;
        case 20: 
          { return new Symbol(simbolo.nombre1, yychar,yyline,new String(yytext()));
          }
        case 71: break;
        case 30: 
          { return new Symbol(simbolo.contacto1, yychar,yyline,new String(yytext()));
          }
        case 72: break;
        case 11: 
          { return new Symbol(simbolo.hora, yychar,yyline,new String(yytext()));
          }
        case 73: break;
        case 6: 
          { return new Symbol(simbolo.cerrar, yychar,yyline,new String(yytext()));
          }
        case 74: break;
        case 31: 
          { return new Symbol(simbolo.usuario2, yychar,yyline,new String(yytext()));
          }
        case 75: break;
        case 32: 
          { return new Symbol(simbolo.usuarios1, yychar,yyline,new String(yytext()));
          }
        case 76: break;
        case 34: 
          { return new Symbol(simbolo.respuesta1, yychar,yyline,new String(yytext()));
          }
        case 77: break;
        case 17: 
          { return new Symbol(simbolo.estado1, yychar,yyline,new String(yytext()));
          }
        case 78: break;
        case 26: 
          { return new Symbol(simbolo.emisor2, yychar,yyline,new String(yytext()));
          }
        case 79: break;
        case 40: 
          { return new Symbol(simbolo.contactos2, yychar,yyline,new String(yytext()));
          }
        case 80: break;
        case 46: 
          { return new Symbol(simbolo.solicitudA1, yychar,yyline,new String(yytext()));
          }
        case 81: break;
        case 5: 
          { return new Symbol(simbolo.abrir, yychar,yyline,new String(yytext()));
          }
        case 82: break;
        case 7: 
          { return new Symbol(simbolo.c2, yychar,yyline,new String(yytext()));
          }
        case 83: break;
        case 29: 
          { return new Symbol(simbolo.usuario1, yychar,yyline,new String(yytext()));
          }
        case 84: break;
        case 43: 
          { return new Symbol(simbolo.solicitudes2, yychar,yyline,new String(yytext()));
          }
        case 85: break;
        case 3: 
          { return new Symbol(simbolo.signos, yychar,yyline,new String(yytext()));
          }
        case 86: break;
        case 18: 
          { return new Symbol(simbolo.emisor1, yychar,yyline,new String(yytext()));
          }
        case 87: break;
        case 35: 
          { return new Symbol(simbolo.contactos1, yychar,yyline,new String(yytext()));
          }
        case 88: break;
        case 23: 
          { return new Symbol(simbolo.login2, yychar,yyline,new String(yytext()));
          }
        case 89: break;
        case 2: 
          { return new Symbol(simbolo.num, yychar,yyline,new String(yytext()));
          }
        case 90: break;
        case 27: 
          { return new Symbol(simbolo.inicio2, yychar,yyline,new String(yytext()));
          }
        case 91: break;
        case 10: 
          { /* Se ignoran */
          }
        case 92: break;
        case 44: 
          { return new Symbol(simbolo.correo, yychar,yyline,new String(yytext()));
          }
        case 93: break;
        case 21: 
          { return new Symbol(simbolo.error2, yychar,yyline,new String(yytext()));
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
