
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 24 20:28:19 CST 2014
//----------------------------------------------------

package parser_chat;

import java.io.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 24 20:28:19 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\005\005\000\002\006\013\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\007\005\000\002\010" +
    "\005\000\002\010\005\000\002\011\005\000\002\012\004" +
    "\000\002\012\003\000\002\013\022\000\002\014\005\000" +
    "\002\015\004\000\002\015\003\000\002\016\015\000\002" +
    "\017\005\000\002\020\004\000\002\020\003\000\002\021" +
    "\012\000\002\022\005\000\002\023\020\000\002\023\015" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\014\025\004\035\012\043\013\047\017\053" +
    "\010\001\002\000\010\021\140\031\142\033\144\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufffc\001\002\000\006\055\105\061\106\001\002" +
    "\000\004\002\ufffe\001\002\000\004\021\063\001\002\000" +
    "\004\045\042\001\002\000\004\002\000\001\002\000\004" +
    "\002\041\001\002\000\004\002\ufffb\001\002\000\004\051" +
    "\022\001\002\000\006\050\uffe6\051\022\001\002\000\004" +
    "\050\037\001\002\000\004\021\023\001\002\000\004\012" +
    "\024\001\002\000\004\022\025\001\002\000\004\037\026" +
    "\001\002\000\010\004\032\005\030\006\031\001\002\000" +
    "\004\040\035\001\002\000\024\004\ufff5\005\ufff5\006\ufff5" +
    "\024\ufff5\030\ufff5\032\ufff5\034\ufff5\040\ufff5\062\ufff5\001" +
    "\002\000\024\004\ufff6\005\ufff6\006\ufff6\024\ufff6\030\ufff6" +
    "\032\ufff6\034\ufff6\040\ufff6\062\ufff6\001\002\000\024\004" +
    "\ufff4\005\ufff4\006\ufff4\024\ufff4\030\ufff4\032\ufff4\034\ufff4" +
    "\040\ufff4\062\ufff4\001\002\000\024\004\032\005\030\006" +
    "\031\024\ufff7\030\ufff7\032\ufff7\034\ufff7\040\ufff7\062\ufff7" +
    "\001\002\000\016\024\ufff8\030\ufff8\032\ufff8\034\ufff8\040" +
    "\ufff8\062\ufff8\001\002\000\004\052\036\001\002\000\006" +
    "\050\uffe5\051\uffe5\001\002\000\004\002\uffe8\001\002\000" +
    "\004\050\uffe7\001\002\000\004\002\001\001\002\000\004" +
    "\021\047\001\002\000\006\044\uffea\045\042\001\002\000" +
    "\004\044\045\001\002\000\004\002\uffec\001\002\000\004" +
    "\044\uffeb\001\002\000\004\012\050\001\002\000\004\022" +
    "\051\001\002\000\004\037\052\001\002\000\010\004\032" +
    "\005\030\006\031\001\002\000\004\040\054\001\002\000" +
    "\004\027\055\001\002\000\010\004\032\005\030\006\031" +
    "\001\002\000\004\030\057\001\002\000\004\046\060\001" +
    "\002\000\006\044\uffe9\045\uffe9\001\002\000\006\021\063" +
    "\036\uffee\001\002\000\004\036\103\001\002\000\004\021" +
    "\064\001\002\000\004\012\065\001\002\000\004\022\066" +
    "\001\002\000\004\037\067\001\002\000\010\004\032\005" +
    "\030\006\031\001\002\000\004\040\071\001\002\000\004" +
    "\041\072\001\002\000\004\010\073\001\002\000\004\017" +
    "\074\001\002\000\004\011\075\001\002\000\004\042\076" +
    "\001\002\000\004\023\077\001\002\000\010\004\032\005" +
    "\030\006\031\001\002\000\004\024\101\001\002\000\004" +
    "\022\102\001\002\000\006\021\uffed\036\uffed\001\002\000" +
    "\004\002\ufff0\001\002\000\004\036\uffef\001\002\000\004" +
    "\012\126\001\002\000\010\004\032\005\030\006\031\001" +
    "\002\000\004\054\110\001\002\000\004\002\uffe4\001\002" +
    "\000\004\062\112\001\002\000\004\055\113\001\002\000" +
    "\004\012\114\001\002\000\004\056\115\001\002\000\004" +
    "\057\116\001\002\000\004\021\117\001\002\000\004\012" +
    "\120\001\002\000\004\022\121\001\002\000\004\037\122" +
    "\001\002\000\010\004\032\005\030\006\031\001\002\000" +
    "\004\040\124\001\002\000\004\060\125\001\002\000\004" +
    "\054\uffe3\001\002\000\004\056\127\001\002\000\004\057" +
    "\130\001\002\000\004\021\131\001\002\000\004\012\132" +
    "\001\002\000\004\022\133\001\002\000\004\037\134\001" +
    "\002\000\010\004\032\005\030\006\031\001\002\000\004" +
    "\040\136\001\002\000\004\060\137\001\002\000\004\054" +
    "\uffe2\001\002\000\004\012\153\001\002\000\004\026\152" +
    "\001\002\000\010\004\032\005\030\006\031\001\002\000" +
    "\004\026\147\001\002\000\010\004\032\005\030\006\031" +
    "\001\002\000\004\034\146\001\002\000\004\026\ufff1\001" +
    "\002\000\004\002\ufffa\001\002\000\004\032\151\001\002" +
    "\000\004\026\ufff2\001\002\000\004\002\ufff3\001\002\000" +
    "\004\022\154\001\002\000\004\023\155\001\002\000\010" +
    "\004\032\005\030\006\031\001\002\000\004\024\157\001" +
    "\002\000\004\027\160\001\002\000\010\004\032\005\030" +
    "\006\031\001\002\000\004\030\162\001\002\000\004\026" +
    "\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\020\002\014\005\013\007\005\011\010\014" +
    "\004\017\006\022\015\001\001\000\006\006\142\010\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\106\001\001\000\002\001\001\000\006" +
    "\012\061\013\060\001\001\000\006\015\043\016\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\020\021\017\001\001\000\006\020\037\021" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\026\004\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\033\004" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\045\016\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\052\004\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\055\004\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\103\013" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\067\004\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\077\004\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\110\004\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\122\004\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\134\004\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\147\004\032" +
    "\001\001\000\002\001\001\000\006\003\144\004\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\155\004\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\160\004\032\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public  String lUsuario;
public  String lNombre;
public  String pass;
public int respuesta;
public String msjCuenta;
public String rCorreo="";
    
        public LinkedList<Errores> lista         = new LinkedList<Errores>();
        public LinkedList<usuario> listaUsuarios = new LinkedList<usuario>();
        public usuario usuario;
        public LinkedList<contacto> listaContactos =new LinkedList<contacto>();

        public LinkedList<solicitud> listaSolicitudes =new LinkedList<solicitud>();

        public enviarSolicitud eSolicitud;
     /*   public correo correo;

        public correo_envio correo_envio;*/

        /*Variable de salida*/
        public String Salida=new String();

            /**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
       // System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        lista.add(new Errores(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
}
             /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       // System.out.println("Error en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
       // lista.add(new Errores(s.right+1,s.left,"Error sintactico2 Identificador " +s.value + " no reconocido." ));
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


int c=0;
String[] username;
LinkedList<String> destinatarios = new LinkedList<String>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ES2 ::= destinatario1 correo destinatario2 emisor1 usuario1 correo usuario2 nombre1 TEXTO nombre2 emisor2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.respuesta=3;  parser.eSolicitud = new enviarSolicitud(t1, t2, t3, "No"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ES2 ::= respuesta1 TEXTO respuesta2 destinatario1 correo destinatario2 emisor1 usuario1 correo usuario2 nombre1 TEXTO nombre2 emisor2 
            {
              String RESULT =null;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.respuesta=4; parser.eSolicitud = new enviarSolicitud(t1, t2, t3, t4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ES1 ::= solicitudA1 ES2 solicitudA2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LS3 ::= solicitud1 usuario1 correo usuario2 nombre1 TEXTO nombre2 solicitud2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.listaSolicitudes.add(new solicitud(t1,t2, 1));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LS3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LS2 ::= LS3 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LS2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LS2 ::= LS3 LS2 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LS2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LS1 ::= solicitudes1 LS2 solicitudes2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LS1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LC3 ::= contacto1 usuario1 correo usuario2 nombre1 TEXTO nombre2 estado1 TEXTO estado2 contacto2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.listaContactos.add(new contacto(t1,t2, t3, 0));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LC2 ::= LC3 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LC2 ::= LC3 LC2 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LC1 ::= contactos1 LC2 contactos2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LU3 ::= usuario1 usuario1 correo usuario2 nombre1 TEXTO nombre2 fecha1 fecha coma hora fecha2 clave1 TEXTO clave2 usuario2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t31 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t32 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 username = t1.split("@");  parser.listaUsuarios.add(new usuario(t1, username[0], t2, t31+","+t32, t4, ""));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LU2 ::= LU3 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LU2 ::= LU3 LU2 
            {
              String RESULT =null;
		int nt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nt2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LU1 ::= usuarios1 LU2 usuarios2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LU1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RIS2 ::= error1 TEXTO error2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.respuesta=1; parser.msjCuenta= t1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RIS2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RIS2 ::= inicio1 TEXTO inicio2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.respuesta=2; parser.msjCuenta= t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RIS2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RIS1 ::= login1 RIS2 login2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RIS1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CADENA ::= signos 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CADENA ::= num 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CADENA ::= cad 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TEXTO ::= CADENA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= t.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TEXTO ::= CADENA TEXTO 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  t1 = t1+" "+t2;  RESULT=t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IS2 ::= usuario1 correo usuario2 clave1 TEXTO clave2 estado1 TEXTO estado2 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 username = t1.split("@"); parser.usuario = new usuario(t1, username[0], "", "", t2, t3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IS1 ::= login1 IS2 login2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIA ::= ES1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIA ::= LS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIA ::= LC1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIA ::= LU1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIA ::= RIS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= IS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

